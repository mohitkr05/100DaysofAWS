{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS -hands on learning Hands on approach for learning AWS Chapters The chapters are sorted in various sections Section 01 - Introduction No. Note Description 1 Introduction to AWS Introduction to AWS 2 Introduction to Virtualization Introduction to Virtualization 3 Introduction to Cloud Computing Introduction to Cloud Computing 4 Lab 01 - Adding MFA to the account Adding MFA to the account 5 Lab 02 - Create an IAM user Create an IAM user 6 Lab 03 - Adding budget alets Adding budget alerts Section 02 - EC2 instances No. Note Description 1 Notes - EC2 Instances Introduction to EC2 2 Lab 04 - Create an EC2 instance Launch an EC2 instance using console 3 Lab 05 - What happens to public IP when you restart an instance What happens to public IP when you restart an instance 4 Lab 06 - Launching an instance with userscript Launching an instance with userscript 5 Lab 07 - Attaching an Elastic IP Attaching an Elastic IP 6 Lab 08 - Attaching an EBS volume Attaching an EBS volume 7 Lab 09 - Restoring an EBS volume Restoring an EBS volume 8 Lab 10 - Understanding bursting nature Understanding bursting nature 9 Lab 11 - Creating a static website Creating a static website 10 Lab 12 - Cleaning up all resources Cleaning up all resources Section 03 - S3 Notes Labs Lab 13 - Create an S3 bucket Lab 14 - Uploading and Downloading files to S3 Lab 15 - Versioning in S3 Buckets Lab 16 - Lifecycle policies Certifications AWS Solution Architect Associate exam AWS SAA-03","title":"Home"},{"location":"#aws-hands-on-learning","text":"Hands on approach for learning AWS","title":"AWS -hands on learning"},{"location":"#chapters","text":"The chapters are sorted in various sections","title":"Chapters"},{"location":"#section-01-introduction","text":"No. Note Description 1 Introduction to AWS Introduction to AWS 2 Introduction to Virtualization Introduction to Virtualization 3 Introduction to Cloud Computing Introduction to Cloud Computing 4 Lab 01 - Adding MFA to the account Adding MFA to the account 5 Lab 02 - Create an IAM user Create an IAM user 6 Lab 03 - Adding budget alets Adding budget alerts","title":"Section 01 - Introduction"},{"location":"#section-02-ec2-instances","text":"No. Note Description 1 Notes - EC2 Instances Introduction to EC2 2 Lab 04 - Create an EC2 instance Launch an EC2 instance using console 3 Lab 05 - What happens to public IP when you restart an instance What happens to public IP when you restart an instance 4 Lab 06 - Launching an instance with userscript Launching an instance with userscript 5 Lab 07 - Attaching an Elastic IP Attaching an Elastic IP 6 Lab 08 - Attaching an EBS volume Attaching an EBS volume 7 Lab 09 - Restoring an EBS volume Restoring an EBS volume 8 Lab 10 - Understanding bursting nature Understanding bursting nature 9 Lab 11 - Creating a static website Creating a static website 10 Lab 12 - Cleaning up all resources Cleaning up all resources","title":"Section 02 - EC2 instances"},{"location":"#section-03-s3","text":"","title":"Section 03 - S3"},{"location":"#notes","text":"","title":"Notes"},{"location":"#labs","text":"Lab 13 - Create an S3 bucket Lab 14 - Uploading and Downloading files to S3 Lab 15 - Versioning in S3 Buckets Lab 16 - Lifecycle policies","title":"Labs"},{"location":"#certifications","text":"AWS Solution Architect Associate exam AWS SAA-03","title":"Certifications"},{"location":"labs/01-iam-mfa-lab/","text":"Lab for configuring permissions in IAM Lab for configuring permissions in IAM, according to AWS best practices. Adding a new User In this section, we will create a user with administrator permissions using the AWS Console. Access the AWS Dashboard for IAM (https://console.aws.amazon.com/iam/home) Click on Users Click on Add User Define the user name and choose the access type. Select Programmatic Access to allow use of the CLI, or AWS Management Console Access to allow login and access through the AWS console. Click on Next: Permissions. Image 02 In the Groups section, we would include this user in a group, but we will address the Groups section in another part of this tutorial. Select the \"Attach existing policies directly\" tab and choose the permission that this user needs. In this tutorial, we will choose AdministratorAccess (in practice, be very careful when using this type of permission). Click on Next: Tags. In this section, we can define tags to facilitate management. Adding a new group To create a group, access the IAM dashboard, click on Groups on the left side of the screen, and then click on Create New Group Define the group name and click on Next Step. Choose the permission that will be associated with this group. This means that any user that is added to this group will have these permissions. For this tutorial, we will choose the AdministratorAccess permission and click on Next Step. Adding Users to the Group In the created group, click on Add Users to Group. Select the user you would like to add to the group and click on Add Users. Adding MFA to the Root Account Access the main screen of the IAM Dashboard, click on Activate MFA on your root account and then click on Manage MFA Click on Activate MFA. Choose one of the three options: The first is to add Virtual MFA, using an application like Google Authenticator or Authy, for example, the second is for physical MFA, and the third is for another type of MFA. For this tutorial, we will use Virtual MFA. Use Google Authenticator or Authy to scan the QR Code and get the code to configure.","title":"Lab for configuring permissions in IAM"},{"location":"labs/01-iam-mfa-lab/#lab-for-configuring-permissions-in-iam","text":"Lab for configuring permissions in IAM, according to AWS best practices.","title":"Lab for configuring permissions in IAM"},{"location":"labs/01-iam-mfa-lab/#adding-a-new-user","text":"In this section, we will create a user with administrator permissions using the AWS Console. Access the AWS Dashboard for IAM (https://console.aws.amazon.com/iam/home) Click on Users Click on Add User Define the user name and choose the access type. Select Programmatic Access to allow use of the CLI, or AWS Management Console Access to allow login and access through the AWS console. Click on Next: Permissions. Image 02 In the Groups section, we would include this user in a group, but we will address the Groups section in another part of this tutorial. Select the \"Attach existing policies directly\" tab and choose the permission that this user needs. In this tutorial, we will choose AdministratorAccess (in practice, be very careful when using this type of permission). Click on Next: Tags. In this section, we can define tags to facilitate management.","title":"Adding a new User"},{"location":"labs/01-iam-mfa-lab/#adding-a-new-group","text":"To create a group, access the IAM dashboard, click on Groups on the left side of the screen, and then click on Create New Group Define the group name and click on Next Step. Choose the permission that will be associated with this group. This means that any user that is added to this group will have these permissions. For this tutorial, we will choose the AdministratorAccess permission and click on Next Step.","title":"Adding a new group"},{"location":"labs/01-iam-mfa-lab/#adding-users-to-the-group","text":"In the created group, click on Add Users to Group. Select the user you would like to add to the group and click on Add Users.","title":"Adding Users to the Group"},{"location":"labs/01-iam-mfa-lab/#adding-mfa-to-the-root-account","text":"Access the main screen of the IAM Dashboard, click on Activate MFA on your root account and then click on Manage MFA Click on Activate MFA. Choose one of the three options: The first is to add Virtual MFA, using an application like Google Authenticator or Authy, for example, the second is for physical MFA, and the third is for another type of MFA. For this tutorial, we will use Virtual MFA. Use Google Authenticator or Authy to scan the QR Code and get the code to configure.","title":"Adding MFA to the Root Account"},{"location":"labs/02-iam-user-lab/","text":"","title":"02 iam user lab"},{"location":"labs/03-budget-lab/","text":"","title":"03 budget lab"},{"location":"labs/04-ec2-lab/","text":"Launch an EC2 instance Make sure you select AMI and Instance types for the free tier Create a new key pair, use .ppk if you use putty else .pem if you use openssh/ Enable port 22 for your IP address in the security group Configure Putty to load the private key Once the instance is in running state you can ssh into the instance Alternatively, you can connect using the EC2 serial console, but for that you need to allow for this configuration (only available for Nitro system instances)","title":"04 ec2 lab"},{"location":"labs/05-public-ip-lab/","text":"Verify the public IP of the EC2 instance Verify the public DNS name of the EC2 instance ec2-13-232-38-98.ap-south-1.compute.amazonaws.com Visit the page using the public DNS stop the instance and start it again Verify the Public IP address and DNS name of the EC2 instance. Is it still the same?","title":"05 public ip lab"},{"location":"labs/06-userscript-lab/","text":"Copy the following in the user script #!/bin/bash sudo yum -y update sudo yum install -y nginx sudo systemctl enable nginx sudo systemctl start nginx Make sure you have HTTP allowed in the security group Test the connectivity","title":"06 userscript lab"},{"location":"labs/07-elastic-ip-lab/","text":"Assigning Elastic IP addresses Click on Allocate Elastic IP address - this will provide you with an Elastic IP address. Associate elastic IP address - There are several ways you can associate IP address - Instance - Network Interface Select instance in this case. Reboot the EC2 instance , to validate if the IP address has been disassociated","title":"Assigning Elastic IP addresses"},{"location":"labs/07-elastic-ip-lab/#assigning-elastic-ip-addresses","text":"Click on Allocate Elastic IP address - this will provide you with an Elastic IP address. Associate elastic IP address - There are several ways you can associate IP address - Instance - Network Interface Select instance in this case. Reboot the EC2 instance , to validate if the IP address has been disassociated","title":"Assigning Elastic IP addresses"},{"location":"labs/08-ebs-lab/","text":"Attaching an EBS instance Create a new EBS volume , by selecting the option from the left menu EBS Volume -> Create EBS Volume (top right) Provide the details such as size, IOPS and volume type Once the volume is created and in ready state, you can attach it to the instance Click on attach the volume Attach the volume to the instance Check the disk status in the instance [ ec2-user@ip-172-31-1-185 ~ ] $ sudo fdisk -l Disk /dev/xvda: 8 GiB, 8589934592 bytes, 16777216 sectors Units: sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 512 bytes I/O size ( minimum/optimal ) : 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 8B1BA8F1-7445-4C33-BE2B-040036A18CCC Device Start End Sectors Size Type /dev/xvda1 24576 16777182 16752607 8G Linux filesystem /dev/xvda127 22528 24575 2048 1M BIOS boot /dev/xvda128 2048 22527 20480 10M EFI System Partition table entries are not in disk order. Disk /dev/xvdb: 10 GiB, 10737418240 bytes, 20971520 sectors Units: sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 512 bytes I/O size ( minimum/optimal ) : 512 bytes The above print shows the disk /dev/xvdb is attached. we need to format it and mount it Format and mount the disk , validate if you can create file in the ebs volume [ ec2-user@ip-172-31-1-185 ~ ] $ sudo mkfs.ext4 /dev/xvdb mke2fs 1 .46.5 ( 30 -Dec-2021 ) Creating filesystem with 2621440 4k blocks and 655360 inodes Filesystem UUID: 9392d943-5249-4651-8f16-76174e23f9df Superblock backups stored on blocks: 32768 , 98304 , 163840 , 229376 , 294912 , 819200 , 884736 , 1605632 Allocating group tables: done Writing inode tables: done Creating journal ( 16384 blocks ) : done Writing superblocks and filesystem accounting information: done [ ec2-user@ip-172-31-1-185 ~ ] $ sudo mkdir /mnt/ebs [ ec2-user@ip-172-31-1-185 ~ ] $ [ ec2-user@ip-172-31-1-185 ~ ] $ sudo mount /dev/xvdb /mnt/ebs [ ec2-user@ip-172-31-1-185 ~ ] $ [ ec2-user@ip-172-31-1-185 ~ ] $ ls /mnt/ebs lost+found [ ec2-user@ip-172-31-1-185 ~ ] $ [ ec2-user@ip-172-31-1-185 ~ ] $ cd /mnt/ebs [ ec2-user@ip-172-31-1-185 ebs ] $ [ ec2-user@ip-172-31-1-185 ebs ] $ touch hello-world-ebs-file touch: cannot touch 'hello-world-ebs-file' : Permission denied [ ec2-user@ip-172-31-1-185 ebs ] $ sudo touch hello-world-ebs-file [ ec2-user@ip-172-31-1-185 ebs ] $ ls -lrt total 16 drwx------. 2 root root 16384 Jun 30 01 :14 lost+found -rw-r--r--. 1 root root 0 Jun 30 01 :15 hello-world-ebs-file","title":"Attaching an EBS instance"},{"location":"labs/08-ebs-lab/#attaching-an-ebs-instance","text":"Create a new EBS volume , by selecting the option from the left menu EBS Volume -> Create EBS Volume (top right) Provide the details such as size, IOPS and volume type Once the volume is created and in ready state, you can attach it to the instance Click on attach the volume Attach the volume to the instance Check the disk status in the instance [ ec2-user@ip-172-31-1-185 ~ ] $ sudo fdisk -l Disk /dev/xvda: 8 GiB, 8589934592 bytes, 16777216 sectors Units: sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 512 bytes I/O size ( minimum/optimal ) : 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 8B1BA8F1-7445-4C33-BE2B-040036A18CCC Device Start End Sectors Size Type /dev/xvda1 24576 16777182 16752607 8G Linux filesystem /dev/xvda127 22528 24575 2048 1M BIOS boot /dev/xvda128 2048 22527 20480 10M EFI System Partition table entries are not in disk order. Disk /dev/xvdb: 10 GiB, 10737418240 bytes, 20971520 sectors Units: sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 512 bytes I/O size ( minimum/optimal ) : 512 bytes The above print shows the disk /dev/xvdb is attached. we need to format it and mount it Format and mount the disk , validate if you can create file in the ebs volume [ ec2-user@ip-172-31-1-185 ~ ] $ sudo mkfs.ext4 /dev/xvdb mke2fs 1 .46.5 ( 30 -Dec-2021 ) Creating filesystem with 2621440 4k blocks and 655360 inodes Filesystem UUID: 9392d943-5249-4651-8f16-76174e23f9df Superblock backups stored on blocks: 32768 , 98304 , 163840 , 229376 , 294912 , 819200 , 884736 , 1605632 Allocating group tables: done Writing inode tables: done Creating journal ( 16384 blocks ) : done Writing superblocks and filesystem accounting information: done [ ec2-user@ip-172-31-1-185 ~ ] $ sudo mkdir /mnt/ebs [ ec2-user@ip-172-31-1-185 ~ ] $ [ ec2-user@ip-172-31-1-185 ~ ] $ sudo mount /dev/xvdb /mnt/ebs [ ec2-user@ip-172-31-1-185 ~ ] $ [ ec2-user@ip-172-31-1-185 ~ ] $ ls /mnt/ebs lost+found [ ec2-user@ip-172-31-1-185 ~ ] $ [ ec2-user@ip-172-31-1-185 ~ ] $ cd /mnt/ebs [ ec2-user@ip-172-31-1-185 ebs ] $ [ ec2-user@ip-172-31-1-185 ebs ] $ touch hello-world-ebs-file touch: cannot touch 'hello-world-ebs-file' : Permission denied [ ec2-user@ip-172-31-1-185 ebs ] $ sudo touch hello-world-ebs-file [ ec2-user@ip-172-31-1-185 ebs ] $ ls -lrt total 16 drwx------. 2 root root 16384 Jun 30 01 :14 lost+found -rw-r--r--. 1 root root 0 Jun 30 01 :15 hello-world-ebs-file","title":"Attaching an EBS instance"},{"location":"labs/09-restore-lab/","text":"Create snapshot of an EBS volume To take a snapshot, click on create snapshot for the EBS volume The snapshot might take some time Once the volume snapshot is done, you can detach the EBS volume Delete the volume Once the volume is deleted, you can try to restore from the snapshot Once the volume is restored, you can attach it to the instance","title":"Create snapshot of an EBS volume"},{"location":"labs/09-restore-lab/#create-snapshot-of-an-ebs-volume","text":"To take a snapshot, click on create snapshot for the EBS volume The snapshot might take some time Once the volume snapshot is done, you can detach the EBS volume Delete the volume Once the volume is deleted, you can try to restore from the snapshot Once the volume is restored, you can attach it to the instance","title":"Create snapshot of an EBS volume"},{"location":"labs/10-bursting-lab/","text":"","title":"10 bursting lab"},{"location":"labs/11-static-website-lab/","text":"Static website lab In this lab, you'll learn how to use SFTP (Secure File Transfer Protocol) to upload a static website to an EC2 instance. SFTP is a secure way to transfer files between a local machine and a remote server. Download and install winscp or you can also use scp copy command to upload the files. Files are located at path \"docs\\labs\\static-html-used-car\". Download it from here Upload the files to the EC2 instance using SFTP at the path \"/usr/share/nginx/html\". Make sure that the path has required permissions [ ec2-user@ip-172-31-1-185 nginx ] $ sudo chown ec2-user:ec2-user html Configure the private key in SFTP Configure winscp Upload the files Visit the Public DNS","title":"Static website lab"},{"location":"labs/11-static-website-lab/#static-website-lab","text":"In this lab, you'll learn how to use SFTP (Secure File Transfer Protocol) to upload a static website to an EC2 instance. SFTP is a secure way to transfer files between a local machine and a remote server. Download and install winscp or you can also use scp copy command to upload the files. Files are located at path \"docs\\labs\\static-html-used-car\". Download it from here Upload the files to the EC2 instance using SFTP at the path \"/usr/share/nginx/html\". Make sure that the path has required permissions [ ec2-user@ip-172-31-1-185 nginx ] $ sudo chown ec2-user:ec2-user html Configure the private key in SFTP Configure winscp Upload the files Visit the Public DNS","title":"Static website lab"},{"location":"labs/12-cleanup-lab/","text":"","title":"12 cleanup lab"},{"location":"labs/13-s3-lab/","text":"","title":"13 s3 lab"},{"location":"labs/14-s3-upload-lab/","text":"","title":"14 s3 upload lab"},{"location":"labs/15-s3-versioning-lab/","text":"","title":"15 s3 versioning lab"},{"location":"labs/16-s3-lifecycle-lab/","text":"","title":"16 s3 lifecycle lab"},{"location":"labs/17-create-a-vpc/","text":"Create a new VPC Subnetting Decide the subnets that you are going to use to create a VPC I prefer to use this excellent tool to visualize my subnets. I am going to use the subnet 10.1.0.0/16 for my VPC . I have created the following subnets Subnet address Range of addresses Useable IPs Hosts Remarks Comments 10.1.0.0/20 10.1.0.0 - 10.1.15.255 10.1.0.1 - 10.1.15.254 4094 Public Subnet - AZ A 10.1.16.0/20 10.1.16.0 - 10.1.31.255 10.1.16.1 - 10.1.31.254 4094 Public Subnet - AZ B 10.1.32.0/20 10.1.32.0 - 10.1.47.255 10.1.32.1 - 10.1.47.254 4094 Public Subnet - AZ C 10.1.48.0/20 10.1.48.0 - 10.1.63.255 10.1.48.1 - 10.1.63.254 4094 Private Subnet - AZ A 10.1.64.0/20 10.1.64.0 - 10.1.79.255 10.1.64.1 - 10.1.79.254 4094 Private Subnet - AZ B 10.1.80.0/20 10.1.80.0 - 10.1.95.255 10.1.80.1 - 10.1.95.254 4094 Private Subnet - AZ C 10.1.96.0/20 10.1.96.0 - 10.1.111.255 10.1.96.1 - 10.1.111.254 4094 Future use 10.1.112.0/20 10.1.112.0 - 10.1.127.255 10.1.112.1 - 10.1.127.254 4094 Future use 10.1.128.0/20 10.1.128.0 - 10.1.143.255 10.1.128.1 - 10.1.143.254 4094 Future use 10.1.144.0/20 10.1.144.0 - 10.1.159.255 10.1.144.1 - 10.1.159.254 4094 Future use 10.1.160.0/20 10.1.160.0 - 10.1.175.255 10.1.160.1 - 10.1.175.254 4094 Future use 10.1.176.0/20 10.1.176.0 - 10.1.191.255 10.1.176.1 - 10.1.191.254 4094 Future use 10.1.192.0/20 10.1.192.0 - 10.1.207.255 10.1.192.1 - 10.1.207.254 4094 Future use 10.1.208.0/20 10.1.208.0 - 10.1.223.255 10.1.208.1 - 10.1.223.254 4094 Future use 10.1.224.0/20 10.1.224.0 - 10.1.239.255 10.1.224.1 - 10.1.239.254 4094 Future use 10.1.240.0/20 10.1.240.0 - 10.1.255.255 10.1.240.1 - 10.1.255.254 4094 Future use A subnet is a subdivision of an IP network. It is defined by a network address and a prefix length. The prefix length determines the size of the subnet. For example, a subnet with a prefix length of 24 is a /24 subnet and can have 256 IP addresses available. Subnetting is the process of dividing a larger network into smaller subnets. This is done to reduce the number of IP addresses available in a network and to create logical groupings of IP addresses. To subnet a network, you need to determine the number of subnets you want to create and the number of hosts you want to allocate to each subnet. The number of subnets is determined by the number of IP addresses you want to allocate to each subnet. The number of hosts you want to allocate to each subnet is determined by the number of devices you want to connect to the network. After determining the number of subnets and the number of hosts per subnet, you can use the following formula to calculate the prefix length for each subnet: Prefix Length = Network Bits + (Number of Subnets - 1) + (Number of Host Bits - 2) For example, if you have a /16 network and you want to create 4 subnets, with 16 IP addresses allocated to each subnet, you would use the following formula: Prefix Length = 16 + (4 - 1) + (4 - 2) = 20 This means that the subnets would be /20 subnets. Create a VPC using the VPC workflow Once all the details are provided the VPC will be created View the created VPC","title":"Create a new VPC"},{"location":"labs/17-create-a-vpc/#create-a-new-vpc","text":"Subnetting Decide the subnets that you are going to use to create a VPC I prefer to use this excellent tool to visualize my subnets. I am going to use the subnet 10.1.0.0/16 for my VPC . I have created the following subnets Subnet address Range of addresses Useable IPs Hosts Remarks Comments 10.1.0.0/20 10.1.0.0 - 10.1.15.255 10.1.0.1 - 10.1.15.254 4094 Public Subnet - AZ A 10.1.16.0/20 10.1.16.0 - 10.1.31.255 10.1.16.1 - 10.1.31.254 4094 Public Subnet - AZ B 10.1.32.0/20 10.1.32.0 - 10.1.47.255 10.1.32.1 - 10.1.47.254 4094 Public Subnet - AZ C 10.1.48.0/20 10.1.48.0 - 10.1.63.255 10.1.48.1 - 10.1.63.254 4094 Private Subnet - AZ A 10.1.64.0/20 10.1.64.0 - 10.1.79.255 10.1.64.1 - 10.1.79.254 4094 Private Subnet - AZ B 10.1.80.0/20 10.1.80.0 - 10.1.95.255 10.1.80.1 - 10.1.95.254 4094 Private Subnet - AZ C 10.1.96.0/20 10.1.96.0 - 10.1.111.255 10.1.96.1 - 10.1.111.254 4094 Future use 10.1.112.0/20 10.1.112.0 - 10.1.127.255 10.1.112.1 - 10.1.127.254 4094 Future use 10.1.128.0/20 10.1.128.0 - 10.1.143.255 10.1.128.1 - 10.1.143.254 4094 Future use 10.1.144.0/20 10.1.144.0 - 10.1.159.255 10.1.144.1 - 10.1.159.254 4094 Future use 10.1.160.0/20 10.1.160.0 - 10.1.175.255 10.1.160.1 - 10.1.175.254 4094 Future use 10.1.176.0/20 10.1.176.0 - 10.1.191.255 10.1.176.1 - 10.1.191.254 4094 Future use 10.1.192.0/20 10.1.192.0 - 10.1.207.255 10.1.192.1 - 10.1.207.254 4094 Future use 10.1.208.0/20 10.1.208.0 - 10.1.223.255 10.1.208.1 - 10.1.223.254 4094 Future use 10.1.224.0/20 10.1.224.0 - 10.1.239.255 10.1.224.1 - 10.1.239.254 4094 Future use 10.1.240.0/20 10.1.240.0 - 10.1.255.255 10.1.240.1 - 10.1.255.254 4094 Future use A subnet is a subdivision of an IP network. It is defined by a network address and a prefix length. The prefix length determines the size of the subnet. For example, a subnet with a prefix length of 24 is a /24 subnet and can have 256 IP addresses available. Subnetting is the process of dividing a larger network into smaller subnets. This is done to reduce the number of IP addresses available in a network and to create logical groupings of IP addresses. To subnet a network, you need to determine the number of subnets you want to create and the number of hosts you want to allocate to each subnet. The number of subnets is determined by the number of IP addresses you want to allocate to each subnet. The number of hosts you want to allocate to each subnet is determined by the number of devices you want to connect to the network. After determining the number of subnets and the number of hosts per subnet, you can use the following formula to calculate the prefix length for each subnet: Prefix Length = Network Bits + (Number of Subnets - 1) + (Number of Host Bits - 2) For example, if you have a /16 network and you want to create 4 subnets, with 16 IP addresses allocated to each subnet, you would use the following formula: Prefix Length = 16 + (4 - 1) + (4 - 2) = 20 This means that the subnets would be /20 subnets. Create a VPC using the VPC workflow Once all the details are provided the VPC will be created View the created VPC","title":"Create a new VPC"},{"location":"notes/regions-questions/","text":"Sample questions : AWS Regions and AZs Topic: AWS Regions You are deploying a new web application with high availability requirements. Which of the following is the MOST important factor to consider when selecting an AWS Region? A. Proximity to your end users B. Number of available Availability Zones C. Cost of EC2 instances D. Availability of specific AWS services Explanation: While all the options are important factors, for high availability, having a sufficient number of Availability Zones (AZs) within a Region is crucial. This allows you to distribute your resources across AZs to minimize downtime from isolated failures. Topic: AWS Availability Zones An Availability Zone (AZ) failure disrupts a production database hosted on Amazon RDS. To ensure high availability, what is the recommended recovery action? A. Manually failover the database to a secondary instance in another AZ. B. Re-launch the database instance in the same AZ. C. Restore the database from a recent backup. D. No action needed, RDS automatically recovers within the AZ. Explanation: Option A is the best course of action. RDS offers Multi-AZ deployments where a standby replica resides in a different AZ. During an AZ outage, you can manually initiate a failover to the healthy replica for minimal downtime. Topic: AWS Outposts Your company requires low-latency access to on-premises resources for a critical application. Which AWS service would be the most suitable solution? A. AWS Direct Connect B. AWS Transit Gateway C. AWS LocalZone D. AWS Wavelength Explanation: AWS Outposts, delivered through AWS LocalZone, extends AWS services and infrastructure to your on-premises environment. This provides a low-latency connection between your on-premises resources and the application running on LocalZone. Topic: AWS Wavelength You are developing a mobile application that requires ultra-low latency for real-time processing at the mobile edge. Which AWS service is best suited for this scenario? A. Amazon EC2 B. AWS Lambda@Edge C. Amazon API Gateway D. AWS Wavelength Explanation: AWS Wavelength extends AWS services to the mobile network edge, providing single-digit millisecond latency for mobile applications. This is ideal for real-time processing at the edge of the network. AWS SAA Exam Simulator: Topic 1: AWS Regions What is the PRIMARY benefit of using multiple AWS Regions for your application deployment? A. Cost optimization across different regions B. Improved latency for geographically dispersed users C. Increased number of available instance types D. Enhanced security isolation between application components Which of the following statements is MOST accurate about AWS Regions? A. All regions offer identical services and features. B. Regions are completely isolated from each other. C. Every region has at least two Availability Zones. D. Data transfer between regions is always free of charge. Topic 2: AWS Availability Zones (AZs) What is the MAIN purpose of deploying resources across multiple Availability Zones within a Region? A. To leverage different pricing models for compute resources B. To enforce data residency requirements for specific regulations C. To achieve higher levels of fault tolerance and redundancy D. To isolate development, testing, and production environments How do Availability Zones within a Region guarantee fault tolerance? A. Each AZ has a completely independent power grid and network infrastructure. B. Resources are automatically replicated across all AZs within the Region. C. AZs are geographically separated, minimizing the impact of localized outages. D. AWS automatically migrates resources to a healthy AZ in case of failure in one AZ. Topic 3: AWS Outposts Which scenario is BEST suited for deploying an application using AWS Outposts? A. Building a serverless application with minimal latency requirements B. Extending your existing on-premises infrastructure to the AWS cloud C. Hosting highly sensitive data that requires strict regulatory compliance D. Managing a large fleet of virtual machines with pay-as-you-go pricing What is a KEY advantage of deploying AWS Outposts compared to a traditional on-premises data center? A. Reduced operational overhead and simplified management B. Access to a wider range of AWS services not available on-premises C. Lower upfront costs for hardware and software infrastructure D. Increased security isolation from other AWS customer environments Topic 4: AWS Wavelength What is the PRIMARY target audience for deploying applications on AWS Wavelength? A. Organizations with a global user base requiring low latency B. Enterprises migrating large-scale databases to the AWS cloud C. Businesses with strict data residency requirements in specific regions D. Users who require high-performance compute resources for machine learning What is a UNIQUE benefit of deploying applications on AWS Wavelength compared to a standard AWS Region? A. Wavelength zones offer a wider selection of instance types B. Applications on Wavelength zones leverage a dedicated network infrastructure C. Wavelength zones provide direct access to mobile carrier networks D. Wavelength zones are isolated from other AWS customer deployments AWS SAA Exam Simulator: Topic 1: AWS Regions Which of the following statements is MOST accurate about AWS Regions? A. All regions have the same set of AWS services available. B. Regions are completely isolated from each other. C. Regions are geographically separated collections of data centers. (CORRECT) D. Users can only launch resources in a single region. Topic 2: AWS Availability Zones What is the PRIMARY benefit of deploying resources across multiple Availability Zones within a Region? A. To reduce the cost of running AWS services. B. To improve the latency between resources. C. To enhance the security posture of your application. D. To increase the fault tolerance of your application. (CORRECT) Topic 3: AWS Outposts AWS Outposts are ideal for which of the following scenarios? A. Deploying latency-sensitive workloads close to on-premises infrastructure. (CORRECT) B. Reducing the cost of data transfer between AWS and on-premises resources. C. Offering AWS services to customers with limited internet connectivity. D. Simplifying the management of hybrid cloud deployments. Topic 4: AWS Wavelength What is the KEY advantage of deploying applications on AWS Wavelength? A. Reduced cost for running serverless functions. B. Increased security isolation for sensitive workloads. C. Ultra-low latency connectivity to mobile devices at the network edge. (CORRECT) D. Simplified management of geographically dispersed resources.","title":"Sample questions : AWS Regions and AZs"},{"location":"notes/regions-questions/#sample-questions-aws-regions-and-azs","text":"Topic: AWS Regions You are deploying a new web application with high availability requirements. Which of the following is the MOST important factor to consider when selecting an AWS Region? A. Proximity to your end users B. Number of available Availability Zones C. Cost of EC2 instances D. Availability of specific AWS services Explanation: While all the options are important factors, for high availability, having a sufficient number of Availability Zones (AZs) within a Region is crucial. This allows you to distribute your resources across AZs to minimize downtime from isolated failures. Topic: AWS Availability Zones An Availability Zone (AZ) failure disrupts a production database hosted on Amazon RDS. To ensure high availability, what is the recommended recovery action? A. Manually failover the database to a secondary instance in another AZ. B. Re-launch the database instance in the same AZ. C. Restore the database from a recent backup. D. No action needed, RDS automatically recovers within the AZ. Explanation: Option A is the best course of action. RDS offers Multi-AZ deployments where a standby replica resides in a different AZ. During an AZ outage, you can manually initiate a failover to the healthy replica for minimal downtime. Topic: AWS Outposts Your company requires low-latency access to on-premises resources for a critical application. Which AWS service would be the most suitable solution? A. AWS Direct Connect B. AWS Transit Gateway C. AWS LocalZone D. AWS Wavelength Explanation: AWS Outposts, delivered through AWS LocalZone, extends AWS services and infrastructure to your on-premises environment. This provides a low-latency connection between your on-premises resources and the application running on LocalZone. Topic: AWS Wavelength You are developing a mobile application that requires ultra-low latency for real-time processing at the mobile edge. Which AWS service is best suited for this scenario? A. Amazon EC2 B. AWS Lambda@Edge C. Amazon API Gateway D. AWS Wavelength Explanation: AWS Wavelength extends AWS services to the mobile network edge, providing single-digit millisecond latency for mobile applications. This is ideal for real-time processing at the edge of the network.","title":"Sample questions : AWS Regions and AZs"},{"location":"notes/regions-questions/#aws-saa-exam-simulator","text":"Topic 1: AWS Regions What is the PRIMARY benefit of using multiple AWS Regions for your application deployment? A. Cost optimization across different regions B. Improved latency for geographically dispersed users C. Increased number of available instance types D. Enhanced security isolation between application components Which of the following statements is MOST accurate about AWS Regions? A. All regions offer identical services and features. B. Regions are completely isolated from each other. C. Every region has at least two Availability Zones. D. Data transfer between regions is always free of charge. Topic 2: AWS Availability Zones (AZs) What is the MAIN purpose of deploying resources across multiple Availability Zones within a Region? A. To leverage different pricing models for compute resources B. To enforce data residency requirements for specific regulations C. To achieve higher levels of fault tolerance and redundancy D. To isolate development, testing, and production environments How do Availability Zones within a Region guarantee fault tolerance? A. Each AZ has a completely independent power grid and network infrastructure. B. Resources are automatically replicated across all AZs within the Region. C. AZs are geographically separated, minimizing the impact of localized outages. D. AWS automatically migrates resources to a healthy AZ in case of failure in one AZ. Topic 3: AWS Outposts Which scenario is BEST suited for deploying an application using AWS Outposts? A. Building a serverless application with minimal latency requirements B. Extending your existing on-premises infrastructure to the AWS cloud C. Hosting highly sensitive data that requires strict regulatory compliance D. Managing a large fleet of virtual machines with pay-as-you-go pricing What is a KEY advantage of deploying AWS Outposts compared to a traditional on-premises data center? A. Reduced operational overhead and simplified management B. Access to a wider range of AWS services not available on-premises C. Lower upfront costs for hardware and software infrastructure D. Increased security isolation from other AWS customer environments Topic 4: AWS Wavelength What is the PRIMARY target audience for deploying applications on AWS Wavelength? A. Organizations with a global user base requiring low latency B. Enterprises migrating large-scale databases to the AWS cloud C. Businesses with strict data residency requirements in specific regions D. Users who require high-performance compute resources for machine learning What is a UNIQUE benefit of deploying applications on AWS Wavelength compared to a standard AWS Region? A. Wavelength zones offer a wider selection of instance types B. Applications on Wavelength zones leverage a dedicated network infrastructure C. Wavelength zones provide direct access to mobile carrier networks D. Wavelength zones are isolated from other AWS customer deployments","title":"AWS SAA Exam Simulator:"},{"location":"notes/regions-questions/#aws-saa-exam-simulator_1","text":"Topic 1: AWS Regions Which of the following statements is MOST accurate about AWS Regions? A. All regions have the same set of AWS services available. B. Regions are completely isolated from each other. C. Regions are geographically separated collections of data centers. (CORRECT) D. Users can only launch resources in a single region. Topic 2: AWS Availability Zones What is the PRIMARY benefit of deploying resources across multiple Availability Zones within a Region? A. To reduce the cost of running AWS services. B. To improve the latency between resources. C. To enhance the security posture of your application. D. To increase the fault tolerance of your application. (CORRECT) Topic 3: AWS Outposts AWS Outposts are ideal for which of the following scenarios? A. Deploying latency-sensitive workloads close to on-premises infrastructure. (CORRECT) B. Reducing the cost of data transfer between AWS and on-premises resources. C. Offering AWS services to customers with limited internet connectivity. D. Simplifying the management of hybrid cloud deployments. Topic 4: AWS Wavelength What is the KEY advantage of deploying applications on AWS Wavelength? A. Reduced cost for running serverless functions. B. Increased security isolation for sensitive workloads. C. Ultra-low latency connectivity to mobile devices at the network edge. (CORRECT) D. Simplified management of geographically dispersed resources.","title":"AWS SAA Exam Simulator:"},{"location":"notes/01_introduction/Introduction-to-AWS/","text":"Introduction to AWS What is AWS? Amazon Web Services (AWS) 1 is a cloud computing platform provided by Amazon, offering a wide range of services to individuals, organizations, and governments. It is a comprehensive, secure, and scalable platform that enables customers to build, deploy, and manage applications and services with ease and flexibility. AWS Services AWS provides over 200 fully featured services that span computing, storage, databases, analytics, machine learning, Internet of Things (IoT), security, and more. Some of the popular services offered by AWS include: Amazon Elastic Compute Cloud (EC2) Amazon Simple Storage Service (S3) Amazon Relational Database Service (RDS) Amazon DynamoDB Amazon Lambda Amazon CloudFront Amazon Virtual Private Cloud (VPC) Amazon Elastic Block Store (EBS) Benefits of AWS AWS offers several benefits to its customers, including: Scalability: AWS enables customers to scale their resources up or down based on their requirements, allowing them to meet their changing business needs and control costs effectively. Security: AWS provides a secure and compliant platform with features such as encryption, identity and access management, and monitoring to ensure data protection and compliance with industry standards. Cost-effectiveness: AWS offers a pay-as-you-go pricing model, enabling customers to pay only for what they use and avoid upfront costs and long-term commitments. Reliability: AWS provides high availability, durability, and fault tolerance, ensuring that applications and services are always up and running. Flexibility: AWS enables customers to choose the tools, programming languages, operating systems, and databases they prefer, giving them the freedom to build and run their applications and services as they like. Getting Started with AWS To get started with AWS, customers can create an AWS account and access the AWS Management Console, which provides a web-based interface to access and manage AWS services. AWS also offers various SDKs and APIs for developers to build applications and services that interact with AWS services programmatically. In addition, AWS provides a wealth of resources to help customers learn about AWS and develop their skills, including documentation, training courses, certification programs, forums, and support services. Creating your Account with AWS Go to the AWS website at https://aws.amazon.com/. Click on the \"Create an AWS Account\" button located in the top right corner of the page. Enter your email address, a password, and your AWS account name, then click on \"Continue\". Enter your personal information, including your name, company name (if applicable), address, and phone number. Select your payment method, which can be a credit card, debit card, or bank account. Note that some AWS services offer a free tier with limited usage. Enter your billing address and click on \"Verify and Add\". Review the AWS Customer Agreement and click on \"Create Account and Continue\". AWS will then send a verification code to your email address. Enter the verification code in the provided field and click on \"Verify\". You will then be prompted to choose a support plan, which can be Basic, Developer, Business, or Enterprise. Select the plan that best suits your needs and click on \"Continue\". AWS will then redirect you to the AWS Management Console, where you can access and manage your AWS services. Account security Log in to your AWS account and navigate to the AWS Management Console. Click on the Services dropdown menu and select IAM under the Security, Identity, & Compliance section. In the IAM dashboard, you can create and manage IAM users, groups, and roles to control access to your AWS resources. Secure Access to your Root user account To secure your account, you have to configure multi-factor authentication (MFA) for IAM users and the root account. Create a seperate user for console access Click on the \"Add user\" button to create a new IAM user for console access. Enter a name for the new IAM user and select \"Programmatic access\" and \"AWS Management Console access\" as the access type. Create a password for the new IAM user or let AWS generate one for you, and then click on \"Next: Permissions\". Assign the necessary permissions to the new IAM user, either by adding them to an existing IAM group or by creating a new IAM policy. Review the permissions and click on \"Next: Tags\" to add optional metadata tags to the new IAM user. Review the tags and click on \"Next: Review\" to review the IAM user's settings. Review the settings and click on \"Create user\" to create the new IAM user. Note down the IAM user's console login URL, which should be in the format of https://ACCOUNT-ID.signin.aws.amazon.com/console/. Reference Links AWS Homepage \u21a9","title":"Introduction to AWS"},{"location":"notes/01_introduction/Introduction-to-AWS/#introduction-to-aws","text":"","title":"Introduction to AWS"},{"location":"notes/01_introduction/Introduction-to-AWS/#what-is-aws","text":"Amazon Web Services (AWS) 1 is a cloud computing platform provided by Amazon, offering a wide range of services to individuals, organizations, and governments. It is a comprehensive, secure, and scalable platform that enables customers to build, deploy, and manage applications and services with ease and flexibility.","title":"What is AWS?"},{"location":"notes/01_introduction/Introduction-to-AWS/#aws-services","text":"AWS provides over 200 fully featured services that span computing, storage, databases, analytics, machine learning, Internet of Things (IoT), security, and more. Some of the popular services offered by AWS include: Amazon Elastic Compute Cloud (EC2) Amazon Simple Storage Service (S3) Amazon Relational Database Service (RDS) Amazon DynamoDB Amazon Lambda Amazon CloudFront Amazon Virtual Private Cloud (VPC) Amazon Elastic Block Store (EBS)","title":"AWS Services"},{"location":"notes/01_introduction/Introduction-to-AWS/#benefits-of-aws","text":"AWS offers several benefits to its customers, including: Scalability: AWS enables customers to scale their resources up or down based on their requirements, allowing them to meet their changing business needs and control costs effectively. Security: AWS provides a secure and compliant platform with features such as encryption, identity and access management, and monitoring to ensure data protection and compliance with industry standards. Cost-effectiveness: AWS offers a pay-as-you-go pricing model, enabling customers to pay only for what they use and avoid upfront costs and long-term commitments. Reliability: AWS provides high availability, durability, and fault tolerance, ensuring that applications and services are always up and running. Flexibility: AWS enables customers to choose the tools, programming languages, operating systems, and databases they prefer, giving them the freedom to build and run their applications and services as they like.","title":"Benefits of AWS"},{"location":"notes/01_introduction/Introduction-to-AWS/#getting-started-with-aws","text":"To get started with AWS, customers can create an AWS account and access the AWS Management Console, which provides a web-based interface to access and manage AWS services. AWS also offers various SDKs and APIs for developers to build applications and services that interact with AWS services programmatically. In addition, AWS provides a wealth of resources to help customers learn about AWS and develop their skills, including documentation, training courses, certification programs, forums, and support services.","title":"Getting Started with AWS"},{"location":"notes/01_introduction/Introduction-to-AWS/#creating-your-account-with-aws","text":"Go to the AWS website at https://aws.amazon.com/. Click on the \"Create an AWS Account\" button located in the top right corner of the page. Enter your email address, a password, and your AWS account name, then click on \"Continue\". Enter your personal information, including your name, company name (if applicable), address, and phone number. Select your payment method, which can be a credit card, debit card, or bank account. Note that some AWS services offer a free tier with limited usage. Enter your billing address and click on \"Verify and Add\". Review the AWS Customer Agreement and click on \"Create Account and Continue\". AWS will then send a verification code to your email address. Enter the verification code in the provided field and click on \"Verify\". You will then be prompted to choose a support plan, which can be Basic, Developer, Business, or Enterprise. Select the plan that best suits your needs and click on \"Continue\". AWS will then redirect you to the AWS Management Console, where you can access and manage your AWS services.","title":"Creating your Account with AWS"},{"location":"notes/01_introduction/Introduction-to-AWS/#account-security","text":"Log in to your AWS account and navigate to the AWS Management Console. Click on the Services dropdown menu and select IAM under the Security, Identity, & Compliance section. In the IAM dashboard, you can create and manage IAM users, groups, and roles to control access to your AWS resources.","title":"Account security"},{"location":"notes/01_introduction/Introduction-to-AWS/#secure-access-to-your-root-user-account","text":"To secure your account, you have to configure multi-factor authentication (MFA) for IAM users and the root account.","title":"Secure Access to your Root user account"},{"location":"notes/01_introduction/Introduction-to-AWS/#create-a-seperate-user-for-console-access","text":"Click on the \"Add user\" button to create a new IAM user for console access. Enter a name for the new IAM user and select \"Programmatic access\" and \"AWS Management Console access\" as the access type. Create a password for the new IAM user or let AWS generate one for you, and then click on \"Next: Permissions\". Assign the necessary permissions to the new IAM user, either by adding them to an existing IAM group or by creating a new IAM policy. Review the permissions and click on \"Next: Tags\" to add optional metadata tags to the new IAM user. Review the tags and click on \"Next: Review\" to review the IAM user's settings. Review the settings and click on \"Create user\" to create the new IAM user. Note down the IAM user's console login URL, which should be in the format of https://ACCOUNT-ID.signin.aws.amazon.com/console/.","title":"Create a seperate user for console access"},{"location":"notes/01_introduction/Introduction-to-AWS/#reference-links","text":"AWS Homepage \u21a9","title":"Reference Links"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/","text":"Cloud Computing NIST Definition of Cloud Computing The National Institute of Standards and Technology (NIST) defines cloud computing as: \"Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model is composed of five essential characteristics, three service models, and four deployment models.\" The five essential characteristics of cloud computing according to NIST are: On-demand self-service Broad network access Resource pooling Rapid elasticity Measured service The three service models of cloud computing according to NIST are: Software as a Service (SaaS) Platform as a Service (PaaS) Infrastructure as a Service (IaaS) The four deployment models of cloud computing according to NIST are: Public cloud Private cloud Community cloud Hybrid cloud 5 Essential Characteristics 1. On-Demand Self-Service On-demand self-service allows users to provision computing resources, such as virtual machines, storage, and applications, automatically without requiring human intervention from the service provider. This enables users to quickly and easily access the resources they need to meet their business requirements. 2. Broad Network Access Broad network access enables users to access cloud computing resources over the Internet or other wide-area networks, using a range of devices, such as desktops, laptops, tablets, and smartphones. This allows users to access cloud computing resources from anywhere in the world, using any device with an Internet connection. 3. Resource Pooling Resource pooling allows cloud computing providers to serve multiple customers from a shared pool of computing resources. Providers can dynamically assign and reassign resources to customers as needed, based on their business requirements. This enables providers to maximize the efficiency and utilization of their computing resources, while providing customers with high availability and scalability. 4. Rapid Elasticity Rapid elasticity allows users to quickly and easily scale their computing resources up or down, based on their business requirements. This enables users to respond to changes in demand quickly and efficiently, without incurring the costs and complexity of maintaining their own computing infrastructure. 5. Measured Service Measured service enables users to pay only for the computing resources they use, on a pay-as-you-go basis. Providers can monitor and measure resource usage automatically, enabling users to pay only for the resources they consume, and to avoid upfront costs and long-term commitments. Cloud Computing deployment Models 1. Public Cloud Public cloud refers to cloud computing resources and services that are available to the general public over the Internet. Public cloud providers, such as Amazon Web Services, Microsoft Azure, and Google Cloud, offer a range of computing resources, including virtual machines, storage, databases, and applications, that users can access on a pay-as-you-go basis. 2. Private Cloud Private cloud refers to cloud computing resources and services that are dedicated to a single organization or business, and are not shared with other organizations or the general public. Private cloud resources are typically hosted on-premises or in a data center, and are managed and maintained by the organization's IT department. 3. Community Cloud Community cloud refers to cloud computing resources and services that are shared by a specific community of users, such as government agencies, educational institutions, or research organizations. Community cloud resources are typically designed to meet the specific needs of the community, and are managed and maintained by the community members. 4. Hybrid Cloud Hybrid cloud refers to a combination of two or more cloud computing deployment models, such as public cloud, private cloud, or community cloud. Hybrid cloud enables users to leverage the benefits of multiple cloud computing models, such as scalability and cost-effectiveness, while maintaining control over their sensitive data and applications. Cloud Computing Service Models Cloud computing is typically categorized into three models: 1. Infrastructure as a Service (IaaS) Provides users with access to computing infrastructure, such as virtual machines, storage, and networks, over the Internet. Users can deploy and manage their own software and applications on top of the IaaS infrastructure. 2. Platform as a Service (PaaS) Provides users with access to a platform for developing, deploying, and managing software and applications, without the need to manage the underlying infrastructure. PaaS provides users with a pre-configured environment for developing and deploying their software and applications. 3. Software as a Service (SaaS) Provides users with access to software applications and services over the Internet, without the need to install and manage the software locally. SaaS enables users to access software and services on a pay-as-you-go basis, without the need to invest in expensive software licenses. Cloud Computing Benefits Cloud computing offers several benefits to users, including: Scalability: Cloud computing enables users to scale their computing resources up or down based on their needs, allowing them to meet their changing business requirements and control costs effectively. Flexibility: Cloud computing provides users with the flexibility to choose the computing resources and services they need, without the need to invest in expensive hardware or software. Security: Cloud computing providers offer robust security features, such as encryption, firewalls, and identity and access management, to protect data and applications from unauthorized access and cyber threats. Reliability: Cloud computing providers offer high availability and fault tolerance, ensuring that applications and services are always up and running. Cost-effectiveness: Cloud computing offers pay-as-you-go pricing models, enabling users to pay only for the computing resources they use, and avoiding upfront costs and long-term commitments. List of Cloud Service Providers Amazon Web Services (AWS): https://aws.amazon.com/ Microsoft Azure: https://azure.microsoft.com/ Google Cloud Platform (GCP): https://cloud.google.com/ IBM Cloud: https://www.ibm.com/cloud Oracle Cloud: https://www.oracle.com/cloud/ Alibaba Cloud: https://www.alibabacloud.com/ DigitalOcean: https://www.digitalocean.com/ Rackspace: https://www.rackspace.com/ Salesforce: https://www.salesforce.com/cloud-computing/ VMware Cloud: https://www.vmware.com/cloud Heroku: https://www.heroku.com/ Linode: https://www.linode.com/ Red Hat OpenShift: https://www.openshift.com/ Digital Realty: https://www.digitalrealty.com/cloud SAP Cloud Platform: https://www.sap.com/products/cloud-platform.html Joyent: https://www.joyent.com/ CenturyLink Cloud: https://www.ctl.io/ OVHcloud: https://www.ovhcloud.com/ Tencent Cloud: https://intl.cloud.tencent.com/ Scaleway: https://www.scaleway.com/en/","title":"Cloud Computing"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#cloud-computing","text":"","title":"Cloud Computing"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#nist-definition-of-cloud-computing","text":"The National Institute of Standards and Technology (NIST) defines cloud computing as: \"Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model is composed of five essential characteristics, three service models, and four deployment models.\" The five essential characteristics of cloud computing according to NIST are: On-demand self-service Broad network access Resource pooling Rapid elasticity Measured service The three service models of cloud computing according to NIST are: Software as a Service (SaaS) Platform as a Service (PaaS) Infrastructure as a Service (IaaS) The four deployment models of cloud computing according to NIST are: Public cloud Private cloud Community cloud Hybrid cloud","title":"NIST Definition of Cloud Computing"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#5-essential-characteristics","text":"","title":"5 Essential Characteristics"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#1-on-demand-self-service","text":"On-demand self-service allows users to provision computing resources, such as virtual machines, storage, and applications, automatically without requiring human intervention from the service provider. This enables users to quickly and easily access the resources they need to meet their business requirements.","title":"1. On-Demand Self-Service"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#2-broad-network-access","text":"Broad network access enables users to access cloud computing resources over the Internet or other wide-area networks, using a range of devices, such as desktops, laptops, tablets, and smartphones. This allows users to access cloud computing resources from anywhere in the world, using any device with an Internet connection.","title":"2. Broad Network Access"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#3-resource-pooling","text":"Resource pooling allows cloud computing providers to serve multiple customers from a shared pool of computing resources. Providers can dynamically assign and reassign resources to customers as needed, based on their business requirements. This enables providers to maximize the efficiency and utilization of their computing resources, while providing customers with high availability and scalability.","title":"3. Resource Pooling"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#4-rapid-elasticity","text":"Rapid elasticity allows users to quickly and easily scale their computing resources up or down, based on their business requirements. This enables users to respond to changes in demand quickly and efficiently, without incurring the costs and complexity of maintaining their own computing infrastructure.","title":"4. Rapid Elasticity"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#5-measured-service","text":"Measured service enables users to pay only for the computing resources they use, on a pay-as-you-go basis. Providers can monitor and measure resource usage automatically, enabling users to pay only for the resources they consume, and to avoid upfront costs and long-term commitments.","title":"5. Measured Service"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#cloud-computing-deployment-models","text":"","title":"Cloud Computing deployment Models"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#1-public-cloud","text":"Public cloud refers to cloud computing resources and services that are available to the general public over the Internet. Public cloud providers, such as Amazon Web Services, Microsoft Azure, and Google Cloud, offer a range of computing resources, including virtual machines, storage, databases, and applications, that users can access on a pay-as-you-go basis.","title":"1. Public Cloud"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#2-private-cloud","text":"Private cloud refers to cloud computing resources and services that are dedicated to a single organization or business, and are not shared with other organizations or the general public. Private cloud resources are typically hosted on-premises or in a data center, and are managed and maintained by the organization's IT department.","title":"2. Private Cloud"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#3-community-cloud","text":"Community cloud refers to cloud computing resources and services that are shared by a specific community of users, such as government agencies, educational institutions, or research organizations. Community cloud resources are typically designed to meet the specific needs of the community, and are managed and maintained by the community members.","title":"3. Community Cloud"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#4-hybrid-cloud","text":"Hybrid cloud refers to a combination of two or more cloud computing deployment models, such as public cloud, private cloud, or community cloud. Hybrid cloud enables users to leverage the benefits of multiple cloud computing models, such as scalability and cost-effectiveness, while maintaining control over their sensitive data and applications.","title":"4. Hybrid Cloud"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#cloud-computing-service-models","text":"Cloud computing is typically categorized into three models:","title":"Cloud Computing Service Models"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#1-infrastructure-as-a-service-iaas","text":"Provides users with access to computing infrastructure, such as virtual machines, storage, and networks, over the Internet. Users can deploy and manage their own software and applications on top of the IaaS infrastructure.","title":"1. Infrastructure as a Service (IaaS)"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#2-platform-as-a-service-paas","text":"Provides users with access to a platform for developing, deploying, and managing software and applications, without the need to manage the underlying infrastructure. PaaS provides users with a pre-configured environment for developing and deploying their software and applications.","title":"2. Platform as a Service (PaaS)"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#3-software-as-a-service-saas","text":"Provides users with access to software applications and services over the Internet, without the need to install and manage the software locally. SaaS enables users to access software and services on a pay-as-you-go basis, without the need to invest in expensive software licenses.","title":"3. Software as a Service (SaaS)"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#cloud-computing-benefits","text":"Cloud computing offers several benefits to users, including: Scalability: Cloud computing enables users to scale their computing resources up or down based on their needs, allowing them to meet their changing business requirements and control costs effectively. Flexibility: Cloud computing provides users with the flexibility to choose the computing resources and services they need, without the need to invest in expensive hardware or software. Security: Cloud computing providers offer robust security features, such as encryption, firewalls, and identity and access management, to protect data and applications from unauthorized access and cyber threats. Reliability: Cloud computing providers offer high availability and fault tolerance, ensuring that applications and services are always up and running. Cost-effectiveness: Cloud computing offers pay-as-you-go pricing models, enabling users to pay only for the computing resources they use, and avoiding upfront costs and long-term commitments.","title":"Cloud Computing Benefits"},{"location":"notes/01_introduction/Introduction-to-Cloud-Computing/#list-of-cloud-service-providers","text":"Amazon Web Services (AWS): https://aws.amazon.com/ Microsoft Azure: https://azure.microsoft.com/ Google Cloud Platform (GCP): https://cloud.google.com/ IBM Cloud: https://www.ibm.com/cloud Oracle Cloud: https://www.oracle.com/cloud/ Alibaba Cloud: https://www.alibabacloud.com/ DigitalOcean: https://www.digitalocean.com/ Rackspace: https://www.rackspace.com/ Salesforce: https://www.salesforce.com/cloud-computing/ VMware Cloud: https://www.vmware.com/cloud Heroku: https://www.heroku.com/ Linode: https://www.linode.com/ Red Hat OpenShift: https://www.openshift.com/ Digital Realty: https://www.digitalrealty.com/cloud SAP Cloud Platform: https://www.sap.com/products/cloud-platform.html Joyent: https://www.joyent.com/ CenturyLink Cloud: https://www.ctl.io/ OVHcloud: https://www.ovhcloud.com/ Tencent Cloud: https://intl.cloud.tencent.com/ Scaleway: https://www.scaleway.com/en/","title":"List of Cloud Service Providers"},{"location":"notes/01_introduction/Introduction-to-Virtualization/","text":"Introduction to Virtualization, VPS and AWS Lightsail Virtualization Virtualization is a technology that enables the creation of multiple virtual versions of hardware and software resources, such as servers, operating systems, and storage devices, on a single physical machine. It allows users to run multiple operating systems and applications on a single physical machine, without having to purchase additional hardware or software resources. How Virtualization Works Virtualization works by using a software layer, called a hypervisor, to manage the allocation of physical resources to virtual machines. The hypervisor acts as a mediator between the virtual machines and the physical resources, allocating resources such as CPU, memory, and storage to each virtual machine as needed. Each virtual machine operates as if it were a separate physical machine, with its own operating system, applications, and network connectivity. Types of virtualization Server Virtualization Server virtualization is the most common type of virtualization, and involves partitioning a physical server into multiple virtual servers. Each virtual server operates as if it were a separate physical server, with its own operating system, applications, and network connectivity. Server virtualization can help organizations reduce hardware costs, improve resource utilization, and increase flexibility. Desktop Virtualization Desktop virtualization involves creating virtual desktops on a server, which can be accessed by end-users from their devices. Desktop virtualization can help organizations simplify desktop management, increase security, and reduce costs, by allowing users to access virtual desktops from any device, anywhere. Storage Virtualization Storage virtualization involves pooling multiple physical storage devices, such as hard drives and solid-state drives (SSDs), into a single virtual storage device. This virtual storage device can then be partitioned and allocated to different virtual machines or applications as needed. Storage virtualization can help organizations improve storage utilization, simplify storage management, and increase flexibility. Network Virtualization Network virtualization involves creating multiple virtual networks on a physical network infrastructure. Each virtual network operates as if it were a separate physical network, with its own network address space, routing tables, and access control policies. Network virtualization can help organizations improve network utilization, simplify network management, and increase flexibility. Hypervisor types There are two types of hypervisors: Type 1 Hypervisor Type 2 Hypervisor Runs directly on the physical hardware Runs on top of an existing operating system Provides direct access to physical hardware resources Uses the host operating system to access hardware resources Typically used in server virtualization scenarios Typically used in desktop virtualization scenarios Offers higher performance and better security than Type 2 hypervisors Offers lower performance and security than Type 1 hypervisors Examples include VMware ESXi, Microsoft Hyper-V, and Citrix XenServer Examples include Oracle VirtualBox, VMware Workstation, and Parallels Desktop Cloud computing and virtualization Cloud computing relies heavily on virtualization to provide users with scalable and cost-effective computing resources. By leveraging virtualization, cloud providers can provide users with flexible and dynamic computing environments that can be easily scaled up or down to meet changing business requirements. Some of the relevant AWS services which work using the Virtualization technology includes Elastic Compute Cloud (EC2): EC2 is a web service that provides resizable compute capacity in the cloud. EC2 uses virtualization to provide users with a scalable and cost-effective way to run applications on a virtual server. Users can choose from a variety of virtual machine instances with different CPU, memory, storage, and networking capacities, and can launch, stop, and terminate instances as needed. Lambda: AWS Lambda is a serverless computing service that allows users to run code without provisioning or managing servers. Lambda uses virtualization to provide users with a scalable and cost-effective way to run code in the cloud. Users simply upload their code to Lambda, and the service takes care of provisioning and scaling the necessary compute resources to run the code. Elastic Block Store (EBS): EBS is a high-performance block storage service that allows users to store persistent data for use with Amazon EC2 instances. EBS uses virtualization to provide users with a scalable and highly available way to store data in the cloud. Users can choose from a variety of EBS volume types with different performance characteristics, and can attach and detach volumes from EC2 instances as needed. Virtual Private Cloud (VPC): VPC is a virtual network service that allows users to provision a logically isolated section of the AWS Cloud. VPC uses virtualization to provide users with a secure and flexible way to launch AWS resources into a virtual network that they define. Users can configure the network topology, create subnets, and control inbound and outbound traffic to and from their AWS resources. Virtual Private Server (VPS) A Virtual Private Server (VPS) is a virtual machine that is hosted on a physical server, but operates as if it were a separate physical machine. VPS hosting is a popular hosting option for individuals and businesses that require more control and flexibility than shared hosting, but don't want the expense and complexity of dedicated hosting. A VPS hosting provider typically uses virtualization technology to partition a physical server into multiple virtual machines, each with its own operating system, applications, and resources. Users can typically customize the configuration of their VPS, including CPU, RAM, storage, and bandwidth, and can install any software or applications they require. Examples Amazon Web Services (AWS) Elastic Compute Cloud (EC2) DigitalOcean Linode Vultr Google Cloud Platform (GCP) Compute Engine AWS Lightsail AWS Lightsail is a simplified, easy-to-use cloud computing solution offered by Amazon Web Services (AWS). It provides users with a pre-configured virtual private server (VPS), storage, and networking capabilities, as well as a range of other features, all at an affordable price point. Features AWS Lightsail offers a range of features to help users easily deploy and manage their applications and websites, including: Pre-configured virtual private server (VPS) instances with a range of operating systems and applications, such as WordPress, Drupal, and Joomla. Integrated storage, including solid-state drives (SSD) and block storage. Networking capabilities, including static IP addresses, DNS management, and a firewall. Monitoring and alerting, including performance metrics and notifications. Automated backups and snapshots for easy recovery in case of data loss. Benefits AWS Lightsail offers several benefits to users, including: Ease of use: With pre-configured instances and an easy-to-use management console, AWS Lightsail makes it easy for users to deploy and manage their applications and websites. Affordability: AWS Lightsail is an affordable cloud computing solution, with pricing starting at just a few dollars per month. Scalability: AWS Lightsail instances can be easily scaled up or down to meet changing business requirements. Security: AWS Lightsail provides a range of security features, including a firewall and automated backups, to help users protect their data and applications. Integration with other AWS services: AWS Lightsail can be easily integrated with other AWS services, such as Amazon S3 and Amazon RDS. Reference Links \"What is Virtualization?\" VMware, Inc. https://www.vmware.com/topics/glossary/content/virtualization \"Virtualization: A beginner's guide,\" IBM. https://www.ibm.com/topics/virtualization \"Virtualization,\" Microsoft. https://docs.microsoft.com/en-us/virtualization/","title":"Introduction to Virtualization, VPS and AWS Lightsail"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#introduction-to-virtualization-vps-and-aws-lightsail","text":"","title":"Introduction to Virtualization, VPS and AWS Lightsail"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#virtualization","text":"Virtualization is a technology that enables the creation of multiple virtual versions of hardware and software resources, such as servers, operating systems, and storage devices, on a single physical machine. It allows users to run multiple operating systems and applications on a single physical machine, without having to purchase additional hardware or software resources.","title":"Virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#how-virtualization-works","text":"Virtualization works by using a software layer, called a hypervisor, to manage the allocation of physical resources to virtual machines. The hypervisor acts as a mediator between the virtual machines and the physical resources, allocating resources such as CPU, memory, and storage to each virtual machine as needed. Each virtual machine operates as if it were a separate physical machine, with its own operating system, applications, and network connectivity.","title":"How Virtualization Works"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#types-of-virtualization","text":"","title":"Types of virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#server-virtualization","text":"Server virtualization is the most common type of virtualization, and involves partitioning a physical server into multiple virtual servers. Each virtual server operates as if it were a separate physical server, with its own operating system, applications, and network connectivity. Server virtualization can help organizations reduce hardware costs, improve resource utilization, and increase flexibility.","title":"Server Virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#desktop-virtualization","text":"Desktop virtualization involves creating virtual desktops on a server, which can be accessed by end-users from their devices. Desktop virtualization can help organizations simplify desktop management, increase security, and reduce costs, by allowing users to access virtual desktops from any device, anywhere.","title":"Desktop Virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#storage-virtualization","text":"Storage virtualization involves pooling multiple physical storage devices, such as hard drives and solid-state drives (SSDs), into a single virtual storage device. This virtual storage device can then be partitioned and allocated to different virtual machines or applications as needed. Storage virtualization can help organizations improve storage utilization, simplify storage management, and increase flexibility.","title":"Storage Virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#network-virtualization","text":"Network virtualization involves creating multiple virtual networks on a physical network infrastructure. Each virtual network operates as if it were a separate physical network, with its own network address space, routing tables, and access control policies. Network virtualization can help organizations improve network utilization, simplify network management, and increase flexibility.","title":"Network Virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#hypervisor-types","text":"There are two types of hypervisors: Type 1 Hypervisor Type 2 Hypervisor Runs directly on the physical hardware Runs on top of an existing operating system Provides direct access to physical hardware resources Uses the host operating system to access hardware resources Typically used in server virtualization scenarios Typically used in desktop virtualization scenarios Offers higher performance and better security than Type 2 hypervisors Offers lower performance and security than Type 1 hypervisors Examples include VMware ESXi, Microsoft Hyper-V, and Citrix XenServer Examples include Oracle VirtualBox, VMware Workstation, and Parallels Desktop","title":"Hypervisor types"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#cloud-computing-and-virtualization","text":"Cloud computing relies heavily on virtualization to provide users with scalable and cost-effective computing resources. By leveraging virtualization, cloud providers can provide users with flexible and dynamic computing environments that can be easily scaled up or down to meet changing business requirements. Some of the relevant AWS services which work using the Virtualization technology includes Elastic Compute Cloud (EC2): EC2 is a web service that provides resizable compute capacity in the cloud. EC2 uses virtualization to provide users with a scalable and cost-effective way to run applications on a virtual server. Users can choose from a variety of virtual machine instances with different CPU, memory, storage, and networking capacities, and can launch, stop, and terminate instances as needed. Lambda: AWS Lambda is a serverless computing service that allows users to run code without provisioning or managing servers. Lambda uses virtualization to provide users with a scalable and cost-effective way to run code in the cloud. Users simply upload their code to Lambda, and the service takes care of provisioning and scaling the necessary compute resources to run the code. Elastic Block Store (EBS): EBS is a high-performance block storage service that allows users to store persistent data for use with Amazon EC2 instances. EBS uses virtualization to provide users with a scalable and highly available way to store data in the cloud. Users can choose from a variety of EBS volume types with different performance characteristics, and can attach and detach volumes from EC2 instances as needed. Virtual Private Cloud (VPC): VPC is a virtual network service that allows users to provision a logically isolated section of the AWS Cloud. VPC uses virtualization to provide users with a secure and flexible way to launch AWS resources into a virtual network that they define. Users can configure the network topology, create subnets, and control inbound and outbound traffic to and from their AWS resources.","title":"Cloud computing and virtualization"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#virtual-private-server-vps","text":"A Virtual Private Server (VPS) is a virtual machine that is hosted on a physical server, but operates as if it were a separate physical machine. VPS hosting is a popular hosting option for individuals and businesses that require more control and flexibility than shared hosting, but don't want the expense and complexity of dedicated hosting. A VPS hosting provider typically uses virtualization technology to partition a physical server into multiple virtual machines, each with its own operating system, applications, and resources. Users can typically customize the configuration of their VPS, including CPU, RAM, storage, and bandwidth, and can install any software or applications they require. Examples Amazon Web Services (AWS) Elastic Compute Cloud (EC2) DigitalOcean Linode Vultr Google Cloud Platform (GCP) Compute Engine","title":"Virtual Private Server (VPS)"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#aws-lightsail","text":"AWS Lightsail is a simplified, easy-to-use cloud computing solution offered by Amazon Web Services (AWS). It provides users with a pre-configured virtual private server (VPS), storage, and networking capabilities, as well as a range of other features, all at an affordable price point.","title":"AWS Lightsail"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#features","text":"AWS Lightsail offers a range of features to help users easily deploy and manage their applications and websites, including: Pre-configured virtual private server (VPS) instances with a range of operating systems and applications, such as WordPress, Drupal, and Joomla. Integrated storage, including solid-state drives (SSD) and block storage. Networking capabilities, including static IP addresses, DNS management, and a firewall. Monitoring and alerting, including performance metrics and notifications. Automated backups and snapshots for easy recovery in case of data loss.","title":"Features"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#benefits","text":"AWS Lightsail offers several benefits to users, including: Ease of use: With pre-configured instances and an easy-to-use management console, AWS Lightsail makes it easy for users to deploy and manage their applications and websites. Affordability: AWS Lightsail is an affordable cloud computing solution, with pricing starting at just a few dollars per month. Scalability: AWS Lightsail instances can be easily scaled up or down to meet changing business requirements. Security: AWS Lightsail provides a range of security features, including a firewall and automated backups, to help users protect their data and applications. Integration with other AWS services: AWS Lightsail can be easily integrated with other AWS services, such as Amazon S3 and Amazon RDS.","title":"Benefits"},{"location":"notes/01_introduction/Introduction-to-Virtualization/#reference-links","text":"\"What is Virtualization?\" VMware, Inc. https://www.vmware.com/topics/glossary/content/virtualization \"Virtualization: A beginner's guide,\" IBM. https://www.ibm.com/topics/virtualization \"Virtualization,\" Microsoft. https://docs.microsoft.com/en-us/virtualization/","title":"Reference Links"},{"location":"notes/02_EC2/01-Introduction-to-EC2/","text":"Amazon Elastic Compute cloud (EC2) Introduction Amazon Elastic Compute Cloud (Amazon EC2) provides on-demand, scalable computing capacity in the Amazon Web Services (AWS) Cloud EC2 Instances vs. Virtual Machines Term EC2 Instances (AWS) Virtual Machines (General) Instances Virtual servers in the Amazon Elastic Compute Cloud (EC2). A software program that simulates a physical computer system. Amazon Machine Images (AMIs) Preconfigured templates for EC2 instances that include the operating system and software. Similar to the Images in a virtual machine. Instance Types Various configurations of hardware resources (CPU, memory, storage, networking) for EC2 instances. Hardware configuration settings for a virtual machine. Amazon EBS Volumes Persistent block storage for EC2 instances, separate from the instance itself. Not specific to virtual machines, but can be used for persistent storage attached to a virtual machine. Instance Store Volumes Temporary block storage for EC2 instances, deleted when the instance stops. Temporary storage attached to a virtual machine, typically lost when the virtual machine is powered off. Key Pairs Secure login credentials for EC2 instances (public key stored by AWS, private key stored by user). Various authentication methods can be used for virtual machines, key pairs are a common option. Security Groups Virtual firewalls that control network traffic to and from EC2 instances. Firewalls can be used to control network traffic to and from virtual machines. Notes: EC2 instances are a specific type of virtual machine offered by Amazon Web Services (AWS). Both EC2 instances and virtual machines can run various operating systems and software. Some of the additional features listed (AMIs, EBS volumes, etc.) are specific to AWS EC2 instances. Services to use with Amazon EC2 Service Description Amazon EC2 Auto Scaling Ensures you have the right number of EC2 instances to handle your application load. AWS Backup Automates backups of your EC2 instances and attached EBS volumes. Amazon CloudWatch Monitors your EC2 instances and EBS volumes. Elastic Load Balancing Distributes incoming application traffic across multiple instances. Amazon GuardDuty Detects unauthorized or malicious use of your EC2 instances. EC2 Image Builder Automates creation, management, and deployment of secure and up-to-date server images. AWS Launch Wizard Assists in sizing, configuring, and deploying AWS resources for third-party applications. AWS Systems Manager Provides a secure solution for performing operations on EC2 instances at scale. The most popular ways to EC2 instance Tool Description Benefits Amazon EC2 console Web interface for managing EC2 instances and resources. Easy to use, good for basic tasks. AWS Command Line Interface (AWS CLI) Command-line tool for interacting with AWS services. Powerful, automatable, works on Windows, Mac, and Linux. AWS CloudFormation Infrastructure as code tool for provisioning EC2 resources. Reusable templates, consistent configurations, multi-region deployment. AWS SDKs Language-specific libraries for building applications with AWS services. Simplified development experience, pre-built functions for common tasks. Other ways Tool Description Benefits AWS Tools for PowerShell PowerShell modules for scripting EC2 operations. Automates tasks, integrates with existing PowerShell workflows. Query API API for programmatic access to EC2 resources using HTTP requests. Fine-grained control, automatable from various programming languages. Flexible pricing model Amazon EC2 Pricing Models Model Description Benefits Free Tier Free usage for eligible services for a limited time. Good for experimentation and learning. On-Demand Instances Pay per second for the instances you use. Flexible, no upfront commitment. Savings Plans Discounted hourly rate for committed usage. Lower cost for predictable workloads. Reserved Instances Significant discounts for reserved configurations over 1 or 3 years. Ideal for consistent workloads. Spot Instances Pay variable, market-based prices for unused instances. Can offer substantial cost savings. Dedicated Hosts Dedicated physical server for your use, On-Demand or with Savings Plan. Use existing software licenses, meet compliance needs. On-Demand Capacity Reservations Reserve compute capacity in a specific zone for any time. Ensures capacity for spiky workloads. Per-Second Billing Eliminates unused minute and second charges. Optimizes costs for bursty workloads. Components for Launching an EC2 Instance Component Description Image A template containing the software for your instance (e.g., operating system). Key Pair Security credentials for connecting to your instance (public key on instance, private key on your computer). Network A virtual private cloud (VPC) dedicated to your AWS account (default VPC with subnet in each Availability Zone). Security Group Virtual firewall controlling inbound and outbound traffic. EBS Volume Storage for your instance (required root volume, optional data volumes). Best practices for Amazon EC2 AWS EC2 Security Best Practices Category Description Identity and Access Management (IAM) - Use IAM roles for access control whenever possible. - Implement least permissive security group rules. Operating System and Application Security - Regularly patch and update your instance's OS and applications. Vulnerability Scanning - Use Amazon Inspector to scan for vulnerabilities and unintended network exposure. - Use AWS Security Hub controls to monitor against best practices and security standards. Storage - Understand implications of root device type for data persistence, backup, and recovery. - Use separate EBS volumes for OS and data (data volume persists after termination). - Use instance store for temporary data only (data is deleted when instance stops/terminates). - Encrypt EBS volumes and snapshots. Resource Management - Use instance metadata and tags to track and identify resources. - Be aware of and plan for service quotas. - Use AWS Trusted Advisor for recommendations on cost savings, performance, and security. Backup and Recovery - Regularly backup EBS volumes with snapshots and create AMIs for future deployments. - Deploy critical components across multiple Availability Zones and replicate data. - Design applications to handle dynamic IP addressing. - Monitor and respond to events. - Have a failover plan (manual or with EC2 Auto Scaling). - Regularly test your recovery process. Networking - Set the time-to-live (TTL) value for applications to 255 (IPv4 & IPv6) to avoid reachability issues.","title":"Amazon Elastic Compute cloud (EC2)"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#amazon-elastic-compute-cloud-ec2","text":"","title":"Amazon Elastic Compute cloud (EC2)"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#introduction","text":"Amazon Elastic Compute Cloud (Amazon EC2) provides on-demand, scalable computing capacity in the Amazon Web Services (AWS) Cloud","title":"Introduction"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#ec2-instances-vs-virtual-machines","text":"Term EC2 Instances (AWS) Virtual Machines (General) Instances Virtual servers in the Amazon Elastic Compute Cloud (EC2). A software program that simulates a physical computer system. Amazon Machine Images (AMIs) Preconfigured templates for EC2 instances that include the operating system and software. Similar to the Images in a virtual machine. Instance Types Various configurations of hardware resources (CPU, memory, storage, networking) for EC2 instances. Hardware configuration settings for a virtual machine. Amazon EBS Volumes Persistent block storage for EC2 instances, separate from the instance itself. Not specific to virtual machines, but can be used for persistent storage attached to a virtual machine. Instance Store Volumes Temporary block storage for EC2 instances, deleted when the instance stops. Temporary storage attached to a virtual machine, typically lost when the virtual machine is powered off. Key Pairs Secure login credentials for EC2 instances (public key stored by AWS, private key stored by user). Various authentication methods can be used for virtual machines, key pairs are a common option. Security Groups Virtual firewalls that control network traffic to and from EC2 instances. Firewalls can be used to control network traffic to and from virtual machines. Notes: EC2 instances are a specific type of virtual machine offered by Amazon Web Services (AWS). Both EC2 instances and virtual machines can run various operating systems and software. Some of the additional features listed (AMIs, EBS volumes, etc.) are specific to AWS EC2 instances.","title":"EC2 Instances vs. Virtual Machines"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#services-to-use-with-amazon-ec2","text":"Service Description Amazon EC2 Auto Scaling Ensures you have the right number of EC2 instances to handle your application load. AWS Backup Automates backups of your EC2 instances and attached EBS volumes. Amazon CloudWatch Monitors your EC2 instances and EBS volumes. Elastic Load Balancing Distributes incoming application traffic across multiple instances. Amazon GuardDuty Detects unauthorized or malicious use of your EC2 instances. EC2 Image Builder Automates creation, management, and deployment of secure and up-to-date server images. AWS Launch Wizard Assists in sizing, configuring, and deploying AWS resources for third-party applications. AWS Systems Manager Provides a secure solution for performing operations on EC2 instances at scale.","title":"Services to use with Amazon EC2"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#the-most-popular-ways-to-ec2-instance","text":"Tool Description Benefits Amazon EC2 console Web interface for managing EC2 instances and resources. Easy to use, good for basic tasks. AWS Command Line Interface (AWS CLI) Command-line tool for interacting with AWS services. Powerful, automatable, works on Windows, Mac, and Linux. AWS CloudFormation Infrastructure as code tool for provisioning EC2 resources. Reusable templates, consistent configurations, multi-region deployment. AWS SDKs Language-specific libraries for building applications with AWS services. Simplified development experience, pre-built functions for common tasks.","title":"The most popular ways to EC2 instance"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#other-ways","text":"Tool Description Benefits AWS Tools for PowerShell PowerShell modules for scripting EC2 operations. Automates tasks, integrates with existing PowerShell workflows. Query API API for programmatic access to EC2 resources using HTTP requests. Fine-grained control, automatable from various programming languages.","title":"Other ways"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#flexible-pricing-model","text":"","title":"Flexible pricing model"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#amazon-ec2-pricing-models","text":"Model Description Benefits Free Tier Free usage for eligible services for a limited time. Good for experimentation and learning. On-Demand Instances Pay per second for the instances you use. Flexible, no upfront commitment. Savings Plans Discounted hourly rate for committed usage. Lower cost for predictable workloads. Reserved Instances Significant discounts for reserved configurations over 1 or 3 years. Ideal for consistent workloads. Spot Instances Pay variable, market-based prices for unused instances. Can offer substantial cost savings. Dedicated Hosts Dedicated physical server for your use, On-Demand or with Savings Plan. Use existing software licenses, meet compliance needs. On-Demand Capacity Reservations Reserve compute capacity in a specific zone for any time. Ensures capacity for spiky workloads. Per-Second Billing Eliminates unused minute and second charges. Optimizes costs for bursty workloads.","title":"Amazon EC2 Pricing Models"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#components-for-launching-an-ec2-instance","text":"Component Description Image A template containing the software for your instance (e.g., operating system). Key Pair Security credentials for connecting to your instance (public key on instance, private key on your computer). Network A virtual private cloud (VPC) dedicated to your AWS account (default VPC with subnet in each Availability Zone). Security Group Virtual firewall controlling inbound and outbound traffic. EBS Volume Storage for your instance (required root volume, optional data volumes).","title":"Components for Launching an EC2 Instance"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#best-practices-for-amazon-ec2","text":"","title":"Best practices for Amazon EC2"},{"location":"notes/02_EC2/01-Introduction-to-EC2/#aws-ec2-security-best-practices","text":"Category Description Identity and Access Management (IAM) - Use IAM roles for access control whenever possible. - Implement least permissive security group rules. Operating System and Application Security - Regularly patch and update your instance's OS and applications. Vulnerability Scanning - Use Amazon Inspector to scan for vulnerabilities and unintended network exposure. - Use AWS Security Hub controls to monitor against best practices and security standards. Storage - Understand implications of root device type for data persistence, backup, and recovery. - Use separate EBS volumes for OS and data (data volume persists after termination). - Use instance store for temporary data only (data is deleted when instance stops/terminates). - Encrypt EBS volumes and snapshots. Resource Management - Use instance metadata and tags to track and identify resources. - Be aware of and plan for service quotas. - Use AWS Trusted Advisor for recommendations on cost savings, performance, and security. Backup and Recovery - Regularly backup EBS volumes with snapshots and create AMIs for future deployments. - Deploy critical components across multiple Availability Zones and replicate data. - Design applications to handle dynamic IP addressing. - Monitor and respond to events. - Have a failover plan (manual or with EC2 Auto Scaling). - Regularly test your recovery process. Networking - Set the time-to-live (TTL) value for applications to 255 (IPv4 & IPv6) to avoid reachability issues.","title":"AWS EC2 Security Best Practices"},{"location":"notes/02_EC2/ec2-regions-cli/","text":"Checking EC2 regions with command line PS C: \\w orkspace \\g it \\a ws-learning-by-doing> aws ec2 describe-regions --all-regions Output { \"Regions\" : [ { \"Endpoint\" : \"ec2.ap-south-2.amazonaws.com\" , \"RegionName\" : \"ap-south-2\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-south-1.amazonaws.com\" , \"RegionName\" : \"ap-south-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-south-1.amazonaws.com\" , \"RegionName\" : \"eu-south-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.eu-south-2.amazonaws.com\" , \"RegionName\" : \"eu-south-2\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.me-central-1.amazonaws.com\" , \"RegionName\" : \"me-central-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.il-central-1.amazonaws.com\" , \"RegionName\" : \"il-central-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ca-central-1.amazonaws.com\" , \"RegionName\" : \"ca-central-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-central-1.amazonaws.com\" , \"RegionName\" : \"eu-central-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-central-2.amazonaws.com\" , \"RegionName\" : \"eu-central-2\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.us-west-1.amazonaws.com\" , \"RegionName\" : \"us-west-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.us-west-2.amazonaws.com\" , \"RegionName\" : \"us-west-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.af-south-1.amazonaws.com\" , \"RegionName\" : \"af-south-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.eu-north-1.amazonaws.com\" , \"RegionName\" : \"eu-north-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-west-3.amazonaws.com\" , \"RegionName\" : \"eu-west-3\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-west-2.amazonaws.com\" , \"RegionName\" : \"eu-west-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-west-1.amazonaws.com\" , \"RegionName\" : \"eu-west-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-northeast-3.amazonaws.com\" , \"RegionName\" : \"ap-northeast-3\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-northeast-2.amazonaws.com\" , \"RegionName\" : \"ap-northeast-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.me-south-1.amazonaws.com\" , \"RegionName\" : \"me-south-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-northeast-1.amazonaws.com\" , \"RegionName\" : \"ap-northeast-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.sa-east-1.amazonaws.com\" , \"RegionName\" : \"sa-east-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-east-1.amazonaws.com\" , \"RegionName\" : \"ap-east-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ca-west-1.amazonaws.com\" , \"RegionName\" : \"ca-west-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-southeast-1.amazonaws.com\" , \"RegionName\" : \"ap-southeast-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-southeast-2.amazonaws.com\" , \"RegionName\" : \"ap-southeast-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-southeast-3.amazonaws.com\" , \"RegionName\" : \"ap-southeast-3\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-southeast-4.amazonaws.com\" , \"RegionName\" : \"ap-southeast-4\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.us-east-1.amazonaws.com\" , \"RegionName\" : \"us-east-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.us-east-2.amazonaws.com\" , \"RegionName\" : \"us-east-2\" , \"OptInStatus\" : \"opt-in-not-required\" } ] }","title":"Ec2 regions cli"},{"location":"notes/02_EC2/ec2-regions-cli/#checking-ec2-regions-with-command-line","text":"PS C: \\w orkspace \\g it \\a ws-learning-by-doing> aws ec2 describe-regions --all-regions","title":"Checking EC2 regions with command line"},{"location":"notes/02_EC2/ec2-regions-cli/#output","text":"{ \"Regions\" : [ { \"Endpoint\" : \"ec2.ap-south-2.amazonaws.com\" , \"RegionName\" : \"ap-south-2\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-south-1.amazonaws.com\" , \"RegionName\" : \"ap-south-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-south-1.amazonaws.com\" , \"RegionName\" : \"eu-south-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.eu-south-2.amazonaws.com\" , \"RegionName\" : \"eu-south-2\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.me-central-1.amazonaws.com\" , \"RegionName\" : \"me-central-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.il-central-1.amazonaws.com\" , \"RegionName\" : \"il-central-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ca-central-1.amazonaws.com\" , \"RegionName\" : \"ca-central-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-central-1.amazonaws.com\" , \"RegionName\" : \"eu-central-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-central-2.amazonaws.com\" , \"RegionName\" : \"eu-central-2\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.us-west-1.amazonaws.com\" , \"RegionName\" : \"us-west-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.us-west-2.amazonaws.com\" , \"RegionName\" : \"us-west-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.af-south-1.amazonaws.com\" , \"RegionName\" : \"af-south-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.eu-north-1.amazonaws.com\" , \"RegionName\" : \"eu-north-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-west-3.amazonaws.com\" , \"RegionName\" : \"eu-west-3\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-west-2.amazonaws.com\" , \"RegionName\" : \"eu-west-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.eu-west-1.amazonaws.com\" , \"RegionName\" : \"eu-west-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-northeast-3.amazonaws.com\" , \"RegionName\" : \"ap-northeast-3\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-northeast-2.amazonaws.com\" , \"RegionName\" : \"ap-northeast-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.me-south-1.amazonaws.com\" , \"RegionName\" : \"me-south-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-northeast-1.amazonaws.com\" , \"RegionName\" : \"ap-northeast-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.sa-east-1.amazonaws.com\" , \"RegionName\" : \"sa-east-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-east-1.amazonaws.com\" , \"RegionName\" : \"ap-east-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ca-west-1.amazonaws.com\" , \"RegionName\" : \"ca-west-1\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-southeast-1.amazonaws.com\" , \"RegionName\" : \"ap-southeast-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-southeast-2.amazonaws.com\" , \"RegionName\" : \"ap-southeast-2\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.ap-southeast-3.amazonaws.com\" , \"RegionName\" : \"ap-southeast-3\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.ap-southeast-4.amazonaws.com\" , \"RegionName\" : \"ap-southeast-4\" , \"OptInStatus\" : \"not-opted-in\" }, { \"Endpoint\" : \"ec2.us-east-1.amazonaws.com\" , \"RegionName\" : \"us-east-1\" , \"OptInStatus\" : \"opt-in-not-required\" }, { \"Endpoint\" : \"ec2.us-east-2.amazonaws.com\" , \"RegionName\" : \"us-east-2\" , \"OptInStatus\" : \"opt-in-not-required\" } ] }","title":"Output"},{"location":"notes/02_EC2/practice-test/","text":"You are deploying a web application on AWS that requires high availability. Which EC2 feature can help you automatically scale your instances based on traffic? A. Amazon S3 B. Amazon EC2 Auto Scaling C. Amazon Route 53 D. Amazon CloudWatch You need to create a secure login to your EC2 instance. What is the recommended approach? A. Use a username and password. B. Configure SSH access with a weak password. C. Utilize a key pair with a public key stored on the instance and a private key on your local machine. D. Grant full access to your IAM user. Your application on EC2 requires persistent storage for user data. Which storage option is most suitable? A. Instance store B. Amazon EBS volumes C. Amazon S3 buckets D. Amazon Glacier What is the purpose of a security group in an EC2 environment? A. To manage user access to IAM roles. B. To define network traffic rules for your EC2 instances. C. To schedule instance scaling events. D. To create backups of your EBS volumes. You are launching a new EC2 instance. Where can you find pre-configured templates that include the operating system and software? A. Amazon S3 buckets B. Amazon Machine Images (AMIs) C. Amazon Route 53 zones D. AWS CloudTrail logs When designing a cost-effective EC2 solution, which instance type would likely be the most expensive option? A. t2.micro B. c5.xlarge C. m4.large D. r5.metal You accidentally terminated a critical EC2 instance with an EBS volume attached. How can you recover your data? A. The data is lost as the instance is terminated. B. Restore the instance from a recent Amazon Machine Image (AMI). C. Use an EBS snapshot to create a new EBS volume and attach it to a new instance. D. Redeploy your application from scratch. Which of the following pricing models is best suited for workloads with unpredictable spikes in traffic? A. On-Demand Instances B. Reserved Instances C. Spot Instances D. Savings Plans What AWS service can be used to centrally manage and automate tasks on your EC2 instances? A. Amazon SQS B. Amazon EC2 Systems Manager C. Amazon CloudWatch D. Amazon Inspector You are building a disaster recovery plan for your EC2 instances. Which strategy is MOST effective for ensuring data availability? A. Back up your EBS volumes to a different Availability Zone. B. Implement a RAID configuration on your instance store volumes. C. Rely on automatic instance restarts within the same Availability Zone. D. Regularly create Amazon Machine Images (AMIs) of your instances. True or False EC2 instances are virtual machines that provide scalable compute capacity in the cloud. (True/False) You can only launch EC2 instances with a pre-installed operating system. (True/False) Instance store volumes are a good choice for storing critical application data. (True/False) Security groups can be used to control both inbound and outbound traffic for your EC2 instances. (True/False) Amazon charges you for EC2 instances even when they are stopped. (True/False) Multiple Choice Which of the following tools can be used to access and manage your EC2 instances through a web interface? A. AWS CLI B. AWS CloudFormation C. Amazon EC2 console D. AWS SDKs You want to deploy a new application that requires a specific version of a software package. How can you ensure this software is included when launching your EC2 instance? A. Include the software installation script in the user data for your instance. B. Modify the chosen Amazon Machine Image (AMI) to include the software. C. Upload the software package to an S3 bucket and download it during instance launch. D. There is no way to guarantee specific software versions with EC2 instances.","title":"Practice test"},{"location":"notes/02_EC2/practice-test/#true-or-false","text":"EC2 instances are virtual machines that provide scalable compute capacity in the cloud. (True/False) You can only launch EC2 instances with a pre-installed operating system. (True/False) Instance store volumes are a good choice for storing critical application data. (True/False) Security groups can be used to control both inbound and outbound traffic for your EC2 instances. (True/False) Amazon charges you for EC2 instances even when they are stopped. (True/False)","title":"True or False"},{"location":"notes/02_EC2/practice-test/#multiple-choice","text":"Which of the following tools can be used to access and manage your EC2 instances through a web interface? A. AWS CLI B. AWS CloudFormation C. Amazon EC2 console D. AWS SDKs You want to deploy a new application that requires a specific version of a software package. How can you ensure this software is included when launching your EC2 instance? A. Include the software installation script in the user data for your instance. B. Modify the chosen Amazon Machine Image (AMI) to include the software. C. Upload the software package to an S3 bucket and download it during instance launch. D. There is no way to guarantee specific software versions with EC2 instances.","title":"Multiple Choice"},{"location":"notes/AWS-Solution-architect-exam/mindmap/","text":"mindmap root (( AWS Solution Architect Associate Exam )) Basics Cloud Computing Concepts definition ( Definition ) models ( Service Models : IaaS , PaaS , SaaS ) benefits ( Benefits of Cloud Computing ) AWS Global Infrastructure regions ( AWS Regions ) availabilityZones ( Availability Zones ) edgeLocations ( Edge Locations ) Core Services Compute EC2 ec2Types ( EC2 Instance Types ) launch ( Launching an EC2 Instance ) pricing ( EC2 Pricing Models ) security ( EC2 Security : Key Pairs , Security Groups ) Lambda functions ( Creating Lambda Functions ) triggers ( Event Sources for Lambda ) pricing ( Lambda Pricing ) Storage S3 buckets ( Creating and Managing Buckets ) storageClasses ( S3 Storage Classes ) lifecycle ( S3 Lifecycle Policies ) security ( S3 Security : Bucket Policies , Access Control Lists ) EBS volumes ( Creating EBS Volumes ) types ( EBS Volume Types ) snapshots ( Creating Snapshots ) Glacier vaults ( Creating Vaults ) retrieval ( Glacier Retrieval Options ) Databases RDS dbInstances ( Creating RDS Instances ) backups ( RDS Backups ) readReplicas ( RDS Read Replicas ) DynamoDB tables ( Creating DynamoDB Tables ) indexes ( Indexes in DynamoDB ) streams ( DynamoDB Streams ) Redshift clusters ( Creating Redshift Clusters ) snapshots ( Redshift Snapshots ) security ( Redshift Security ) Networking VPC vpcBasics ( VPC Basics ) subnets ( Creating Subnets ) routing ( Route Tables ) security ( VPC Security : NACLs , Security Groups ) peering ( VPC Peering ) Route 53 domains ( Registering Domains ) hostedZones ( Creating Hosted Zones ) routingPolicies ( Route 53 Routing Policies ) ELB types ( Types of Load Balancers : ALB , NLB , CLB ) configuration ( Configuring Load Balancers ) healthChecks ( Health Checks ) Security IAM users ( Creating Users ) groups ( Creating Groups ) roles ( Creating Roles ) policies ( Attaching Policies ) KMS keys ( Creating KMS Keys ) encryption ( Encrypting Data ) rotation ( Key Rotation Policies ) CloudTrail logging ( Enabling CloudTrail ) management ( Managing CloudTrail Logs ) AWS Shield ddos ( Understanding DDoS Protection ) advanced ( AWS Shield Advanced ) Monitoring and Management CloudWatch metrics ( CloudWatch Metrics ) alarms ( Setting Up Alarms ) logs ( CloudWatch Logs ) CloudFormation stacks ( Creating Stacks ) templates ( Writing Templates ) drift ( Drift Detection ) Trusted Advisor checks ( Trusted Advisor Checks ) costOptimization ( Cost Optimization ) security ( Security Best Practices ) Migration and Transfer DMS tasks ( Creating DMS Tasks ) endpoints ( Configuring Endpoints ) replication ( DMS Replication Instances ) Snowball jobs ( Creating Snowball Jobs ) dataTransfer ( Snowball Data Transfer )","title":"Mindmap"},{"location":"notes/AWS-Solution-architect-exam/start-here/","text":"AWS Solution Architect Associate Exam Bootcamp Official URL Who should take this exam? AWS Certified Solutions Architect - Associate is a great starting point on the AWS Certification path for individuals who may have any of the following: Experience in AWS technology Strong on-premises IT experience and understanding of mapping on-premises to cloud Experience working in other cloud services What does it take to earn this certification? To earn this certification, you\u2019ll need to take and pass the AWS Certified Solutions Architect - Associate exam (SAA-C03). The exam features a combination of two question formats: multiple choice and multiple response. Additional information, such as the exam content outline and passing score, is in the exam guide. The exam also validates a candidate\u2019s ability to complete the following tasks: - Design solutions that incorporate AWS services to meet current business requirements and future projected needs - Design architectures that are secure, resilient, high-performing, and cost-optimized - Review existing solutions and determine improvements to existing solutions Exam content There are two types of questions on the exam: Multiple choice: Has one correct response and three incorrect responses (distractors) Multiple response: Has two or more correct responses out of five or more response options Unanswered questions are scored as incorrect; there is no penalty for guessing. The exam includes 50 questions that affect your score. The exam includes 15 unscored questions that do not affect your score. AWS collects information about performance on these unscored questions to evaluate these questions for future use as scored questions. These unscored questions are not identified on the exam. Domains The exam has the following content domains and weightings: Domain Name Weighting Total questions* 1 Design Secure Architectures 30% 20 2 Design Resilient Architectures 26% 17 3 Design High-Performing Architectures 24% 15 4 Design Cost-Optimized Architectures 20% 13 x Total 100% 65 Approximate number, some questions would be overlapped. Sample questions Detailed guideline Detalied exam guide Domain 1: Design Secure Architectures (30% of scored content) Task Statement 1.1: Design secure access to AWS resources Knowledge of Access controls and management across multiple accounts AWS federated access and identity services (e.g., AWS IAM, AWS IAM Identity Center) AWS global infrastructure (e.g., Availability Zones, AWS Regions) AWS security best practices (e.g., the principle of least privilege) The AWS shared responsibility model Skills in Applying AWS security best practices to IAM users and root users (e.g., MFA) Designing a flexible authorization model (IAM users, groups, roles, and policies) Designing a role-based access control strategy (e.g., AWS STS, role switching, cross-account access) Designing a security strategy for multiple AWS accounts (e.g., AWS Control Tower, SCPs) Determining the appropriate use of resource policies for AWS services Determining when to federate a directory service with IAM roles Task Statement 1.2: Design secure workloads and applications Knowledge of Application configuration and credentials security AWS service endpoints Control ports, protocols, and network traffic on AWS Secure application access Security services with appropriate use cases (e.g., Amazon Cognito, Amazon GuardDuty, Amazon Macie) Threat vectors external to AWS (e.g., DDoS, SQL injection) Skills in Designing VPC architectures with security components (e.g., security groups, route tables, network ACLs, NAT gateways) Determining network segmentation strategies (e.g., public and private subnets) Integrating AWS services to secure applications (e.g., AWS Shield, AWS WAF, IAM Identity Center, AWS Secrets Manager) Securing external network connections to and from the AWS Cloud (e.g., VPN, AWS Direct Connect) Task Statement 1.3: Determine appropriate data security controls Knowledge of Data access and governance Data recovery Data retention and classification Encryption and key management Skills in Aligning AWS technologies to meet compliance requirements Encrypting data at rest (e.g., AWS KMS) Encrypting data in transit (e.g., AWS Certificate Manager using TLS) Implementing access policies for encryption keys Implementing data backups and replications Implementing policies for data access, lifecycle, and protection Rotating encryption keys and renewing certificates Domain 2: Design Resilient Architectures Task Statement 2.1: Design scalable and loosely coupled architectures Knowledge of API creation and management (e.g., Amazon API Gateway, REST API) AWS managed services with appropriate use cases (e.g., AWS Transfer Family, Amazon SQS, Secrets Manager) Caching strategies Design principles for microservices (e.g., stateless vs. stateful workloads) Event-driven architectures Horizontal and vertical scaling Edge accelerators (e.g., CDN) Migrating applications into containers Load balancing concepts (e.g., Application Load Balancer) Multi-tier architectures Queuing and messaging concepts (e.g., publish/subscribe) Serverless technologies and patterns (e.g., AWS Fargate, AWS Lambda) Storage types with associated characteristics (e.g., object, file, block) Container orchestration (e.g., Amazon ECS, Amazon EKS) When to use read replicas Workflow orchestration (e.g., AWS Step Functions) Skills in Designing event-driven, microservice, and/or multi-tier architectures based on requirements Determining scaling strategies for components in an architecture design Determining AWS services required to achieve loose coupling based on requirements Determining when to use containers Determining when to use serverless technologies and patterns Recommending appropriate compute, storage, networking, and database technologies based on requirements Using purpose-built AWS services for workloads Task Statement 2.2: Design highly available and/or fault-tolerant architectures Knowledge of AWS global infrastructure (e.g., Availability Zones, AWS Regions, Amazon Route 53) AWS managed services with appropriate use cases (e.g., Amazon Comprehend, Amazon Polly) Basic networking concepts (e.g., route tables) Disaster recovery (DR) strategies (e.g., backup and restore, pilot light, warm standby, active-active failover, RPO, RTO) Distributed design patterns Failover strategies Immutable infrastructure Load balancing concepts (e.g., Application Load Balancer) Proxy concepts (e.g., Amazon RDS Proxy) Service quotas and throttling (e.g., configuring service quotas for a workload in a standby environment) Storage options and characteristics (e.g., durability, replication) Workload visibility (e.g., AWS X-Ray) Skills in Determining automation strategies to ensure infrastructure integrity Determining AWS services required for highly available and/or fault-tolerant architecture across AWS Regions or Availability Zones Identifying metrics based on business requirements for a highly available solution Implementing designs to mitigate single points of failure Implementing strategies to ensure data durability and availability (e.g., backups) Selecting an appropriate DR strategy to meet business requirements Using AWS services to improve reliability of legacy applications and applications not built for the cloud Using purpose-built AWS services for workloads Domain 3: Design High-Performing Architectures Task Statement 3.1: Determine high-performing and/or scalable storage solutions Knowledge of Hybrid storage solutions to meet business requirements Storage services with appropriate use cases (e.g., Amazon S3, Amazon EFS, Amazon EBS) Storage types with associated characteristics (e.g., object, file, block) Skills in Determining storage services and configurations to meet performance demands Determining storage services that can scale to accommodate future needs Task Statement 3.2: Design high-performing and elastic compute solutions Knowledge of AWS compute services with appropriate use cases (e.g., AWS Batch, Amazon EMR, Fargate) Distributed computing concepts supported by AWS global infrastructure and edge services Queuing and messaging concepts (e.g., publish/subscribe) Scalability capabilities with appropriate use cases (e.g., Amazon EC2 Auto Scaling, AWS Auto Scaling) Serverless technologies and patterns (e.g., Lambda, Fargate) Container orchestration (e.g., Amazon ECS, Amazon EKS) Skills in Decoupling workloads for independent scaling of components Identifying metrics and conditions to perform scaling actions Selecting appropriate compute options and features (e.g., EC2 instance types) to meet business requirements Selecting appropriate resource type and size (e.g., Lambda memory) to meet business requirements Task Statement 3.3: Determine high-performing database solutions Knowledge of AWS global infrastructure (e.g., Availability Zones, AWS Regions) Caching strategies and services (e.g., Amazon ElastiCache) Data access patterns (e.g., read-intensive vs. write-intensive) Database capacity planning (e.g., capacity units, instance types, Provisioned IOPS) Database connections and proxies Database engines with appropriate use cases (e.g., heterogeneous vs. homogeneous migrations) Database replication (e.g., read replicas) Database types and services (e.g., serverless, relational vs. non-relational, in-memory) Skills in Configuring read replicas to meet business requirements Designing database architectures Determining appropriate database engine (e.g., MySQL vs. PostgreSQL) Determining appropriate database type (e.g., Amazon Aurora, Amazon DynamoDB) Integrating caching to meet business requirements Task Statement 3.4: Determine high-performing and/or scalable network architectures Knowledge of Edge networking services with appropriate use cases (e.g., Amazon CloudFront, AWS Global Accelerator) Network architecture design (e.g., subnet tiers, routing, IP addressing) Load balancing concepts (e.g., Application Load Balancer) Network connection options (e.g., AWS VPN, Direct Connect, AWS PrivateLink) Skills in Creating network topology for various architectures (e.g., global, hybrid, multi-tier) Determining network configurations that can scale to accommodate future needs Determining appropriate placement of resources to meet business requirements Selecting appropriate load balancing strategy Task Statement 3.5: Determine high-performing data ingestion and transformation solutions Knowledge of Data analytics and visualization services with appropriate use cases (e.g., Amazon Athena, AWS Lake Formation, Amazon QuickSight) Data ingestion patterns (e.g., frequency) Data transfer services with appropriate use cases (e.g., AWS DataSync, AWS Storage Gateway) Data transformation services with appropriate use cases (e.g., AWS Glue) Secure access to ingestion access points Sizes and speeds needed to meet business requirements Streaming data services with appropriate use cases (e.g., Amazon Kinesis) Skills in Building and securing data lakes Designing data streaming architectures Designing data transfer solutions Implementing visualization strategies Selecting appropriate compute options for data processing (e.g., Amazon EMR) Selecting appropriate configurations for ingestion Transforming data between formats (e.g., .csv to .parquet) Domain 4: Design Cost-Optimized Architectures Task Statement 4.1: Design cost-optimized storage solutions Knowledge of Access options (e.g., S3 bucket with Requester Pays object storage) AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., AWS Cost Explorer, AWS Budgets, AWS Cost and Usage Report) AWS storage services with appropriate use cases (e.g., Amazon FSx, Amazon EFS, Amazon S3, Amazon EBS) Backup strategies Block storage options (e.g., HDD volume types, SSD volume types) Data lifecycles Hybrid storage options (e.g., DataSync, Transfer Family, Storage Gateway) Storage access patterns Storage tiering (e.g., cold tiering for object storage) Storage types with associated characteristics (e.g., object, file, block) Skills in Designing appropriate storage strategies (e.g., batch uploads to S3 vs. individual uploads) Determining the correct storage size for a workload Determining the lowest cost method of transferring data for a workload to AWS storage Determining when storage auto-scaling is required Managing S3 object lifecycles Selecting appropriate backup and/or archival solution Selecting appropriate service for data migration to storage services Selecting appropriate storage tier Selecting correct data lifecycle for storage Selecting the most cost-effective storage service for a workload Task Statement 4.2: Design cost-optimized compute solutions Knowledge of AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., Cost Explorer, AWS Budgets, AWS Cost and Usage Report) AWS global infrastructure (e.g., Availability Zones, AWS Regions) AWS purchasing options (e.g., Spot Instances, Reserved Instances, Savings Plans) Distributed compute strategies (e.g., edge processing) Hybrid compute options (e.g., AWS Outposts, AWS Snowball Edge) Instance types, families, and sizes (e.g., memory optimized, compute optimized, virtualization) Optimization of compute utilization (e.g., containers, serverless computing, microservices) Scaling strategies (e.g., auto-scaling, hibernation) Skills in Determining appropriate load balancing strategy (e.g., Application Load Balancer vs. Network Load Balancer vs. Gateway Load Balancer) Determining appropriate scaling methods and strategies for elastic workloads (e.g., horizontal vs. vertical, EC2 hibernation) Determining cost-effective AWS compute services with appropriate use cases (e.g., Lambda, Amazon EC2, Fargate) Determining required availability for different classes of workloads (e.g., production vs. non-production workloads) Selecting appropriate instance family for a workload Selecting appropriate instance size for a workload Task Statement 4.3: Design cost-optimized database solutions Knowledge of AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., Cost Explorer, AWS Budgets, AWS Cost and Usage Report) Caching strategies Data retention policies Database capacity planning (e.g., capacity units) Database connections and proxies Database engines with appropriate use cases (e.g., heterogeneous vs. homogeneous migrations) Database replication (e.g., read replicas) Database types and services (e.g., relational vs. non-relational, Aurora, DynamoDB) Skills in Designing appropriate backup and retention policies (e.g., snapshot frequency) Determining appropriate database engine (e.g., MySQL vs. PostgreSQL) Determining cost-effective AWS database services with appropriate use cases (e.g., DynamoDB vs. Amazon RDS, serverless) Determining cost-effective AWS database types (e.g., time series format, columnar format) Migrating database schemas and data to different locations and/or different database engines Task Statement 4.4: Design cost-optimized network architectures Knowledge of AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., Cost Explorer, AWS Budgets, AWS Cost and Usage Report) Load balancing concepts (e.g., Application Load Balancer) NAT gateways (e.g., NAT instance costs vs. NAT gateway costs) Network connectivity (e.g., private lines, dedicated lines, VPNs) Network routing, topology, and peering (e.g., AWS Transit Gateway, VPC peering) Network services with appropriate use cases (e.g., DNS) Skills in Configuring appropriate NAT gateway types for a network (e.g., a single shared NAT gateway vs. NAT gateways for each Availability Zone) Configuring appropriate network connections (e.g., Direct Connect vs. VPN vs. internet) Configuring appropriate network routes to minimize network transfer costs (e.g., Region to Region, Availability Zone to Availability Zone, private to public, Global Accelerator, VPC endpoints) Determining strategic needs for content delivery networks (CDNs) and edge caching Reviewing existing workloads for network optimizations Selecting appropriate throttling strategy Selecting appropriate bandwidth allocation for a network device (e.g., a single VPN vs. multiple VPNs, Direct Connect speed) References Exam Prep Official Practice Question Set: AWS Certified Solutions Architect - Associate (SAA-C03 - English) AWS Well architected labs AWS Ramp up AWS Well-Architected Labs Tutorails Dojo AWS Webinars Topics mindmap Topic Details","title":"AWS Solution Architect Associate Exam Bootcamp"},{"location":"notes/AWS-Solution-architect-exam/start-here/#aws-solution-architect-associate-exam-bootcamp","text":"Official URL","title":"AWS Solution Architect Associate Exam Bootcamp"},{"location":"notes/AWS-Solution-architect-exam/start-here/#who-should-take-this-exam","text":"AWS Certified Solutions Architect - Associate is a great starting point on the AWS Certification path for individuals who may have any of the following: Experience in AWS technology Strong on-premises IT experience and understanding of mapping on-premises to cloud Experience working in other cloud services","title":"Who should take this exam?"},{"location":"notes/AWS-Solution-architect-exam/start-here/#what-does-it-take-to-earn-this-certification","text":"To earn this certification, you\u2019ll need to take and pass the AWS Certified Solutions Architect - Associate exam (SAA-C03). The exam features a combination of two question formats: multiple choice and multiple response. Additional information, such as the exam content outline and passing score, is in the exam guide. The exam also validates a candidate\u2019s ability to complete the following tasks: - Design solutions that incorporate AWS services to meet current business requirements and future projected needs - Design architectures that are secure, resilient, high-performing, and cost-optimized - Review existing solutions and determine improvements to existing solutions","title":"What does it take to earn this certification?"},{"location":"notes/AWS-Solution-architect-exam/start-here/#exam-content","text":"There are two types of questions on the exam: Multiple choice: Has one correct response and three incorrect responses (distractors) Multiple response: Has two or more correct responses out of five or more response options Unanswered questions are scored as incorrect; there is no penalty for guessing. The exam includes 50 questions that affect your score. The exam includes 15 unscored questions that do not affect your score. AWS collects information about performance on these unscored questions to evaluate these questions for future use as scored questions. These unscored questions are not identified on the exam.","title":"Exam content"},{"location":"notes/AWS-Solution-architect-exam/start-here/#domains","text":"The exam has the following content domains and weightings: Domain Name Weighting Total questions* 1 Design Secure Architectures 30% 20 2 Design Resilient Architectures 26% 17 3 Design High-Performing Architectures 24% 15 4 Design Cost-Optimized Architectures 20% 13 x Total 100% 65 Approximate number, some questions would be overlapped.","title":"Domains"},{"location":"notes/AWS-Solution-architect-exam/start-here/#sample-questions","text":"","title":"Sample questions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#detailed-guideline","text":"","title":"Detailed guideline"},{"location":"notes/AWS-Solution-architect-exam/start-here/#detalied-exam-guide","text":"","title":"Detalied exam guide"},{"location":"notes/AWS-Solution-architect-exam/start-here/#domain-1-design-secure-architectures-30-of-scored-content","text":"","title":"Domain 1: Design Secure Architectures (30% of scored content)"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-11-design-secure-access-to-aws-resources","text":"","title":"Task Statement 1.1: Design secure access to AWS resources"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of","text":"Access controls and management across multiple accounts AWS federated access and identity services (e.g., AWS IAM, AWS IAM Identity Center) AWS global infrastructure (e.g., Availability Zones, AWS Regions) AWS security best practices (e.g., the principle of least privilege) The AWS shared responsibility model","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in","text":"Applying AWS security best practices to IAM users and root users (e.g., MFA) Designing a flexible authorization model (IAM users, groups, roles, and policies) Designing a role-based access control strategy (e.g., AWS STS, role switching, cross-account access) Designing a security strategy for multiple AWS accounts (e.g., AWS Control Tower, SCPs) Determining the appropriate use of resource policies for AWS services Determining when to federate a directory service with IAM roles","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-12-design-secure-workloads-and-applications","text":"","title":"Task Statement 1.2: Design secure workloads and applications"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_1","text":"Application configuration and credentials security AWS service endpoints Control ports, protocols, and network traffic on AWS Secure application access Security services with appropriate use cases (e.g., Amazon Cognito, Amazon GuardDuty, Amazon Macie) Threat vectors external to AWS (e.g., DDoS, SQL injection)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_1","text":"Designing VPC architectures with security components (e.g., security groups, route tables, network ACLs, NAT gateways) Determining network segmentation strategies (e.g., public and private subnets) Integrating AWS services to secure applications (e.g., AWS Shield, AWS WAF, IAM Identity Center, AWS Secrets Manager) Securing external network connections to and from the AWS Cloud (e.g., VPN, AWS Direct Connect)","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-13-determine-appropriate-data-security-controls","text":"","title":"Task Statement 1.3: Determine appropriate data security controls"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_2","text":"Data access and governance Data recovery Data retention and classification Encryption and key management","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_2","text":"Aligning AWS technologies to meet compliance requirements Encrypting data at rest (e.g., AWS KMS) Encrypting data in transit (e.g., AWS Certificate Manager using TLS) Implementing access policies for encryption keys Implementing data backups and replications Implementing policies for data access, lifecycle, and protection Rotating encryption keys and renewing certificates","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#domain-2-design-resilient-architectures","text":"","title":"Domain 2: Design Resilient Architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-21-design-scalable-and-loosely-coupled-architectures","text":"","title":"Task Statement 2.1: Design scalable and loosely coupled architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_3","text":"API creation and management (e.g., Amazon API Gateway, REST API) AWS managed services with appropriate use cases (e.g., AWS Transfer Family, Amazon SQS, Secrets Manager) Caching strategies Design principles for microservices (e.g., stateless vs. stateful workloads) Event-driven architectures Horizontal and vertical scaling Edge accelerators (e.g., CDN) Migrating applications into containers Load balancing concepts (e.g., Application Load Balancer) Multi-tier architectures Queuing and messaging concepts (e.g., publish/subscribe) Serverless technologies and patterns (e.g., AWS Fargate, AWS Lambda) Storage types with associated characteristics (e.g., object, file, block) Container orchestration (e.g., Amazon ECS, Amazon EKS) When to use read replicas Workflow orchestration (e.g., AWS Step Functions)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_3","text":"Designing event-driven, microservice, and/or multi-tier architectures based on requirements Determining scaling strategies for components in an architecture design Determining AWS services required to achieve loose coupling based on requirements Determining when to use containers Determining when to use serverless technologies and patterns Recommending appropriate compute, storage, networking, and database technologies based on requirements Using purpose-built AWS services for workloads","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-22-design-highly-available-andor-fault-tolerant-architectures","text":"","title":"Task Statement 2.2: Design highly available and/or fault-tolerant architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_4","text":"AWS global infrastructure (e.g., Availability Zones, AWS Regions, Amazon Route 53) AWS managed services with appropriate use cases (e.g., Amazon Comprehend, Amazon Polly) Basic networking concepts (e.g., route tables) Disaster recovery (DR) strategies (e.g., backup and restore, pilot light, warm standby, active-active failover, RPO, RTO) Distributed design patterns Failover strategies Immutable infrastructure Load balancing concepts (e.g., Application Load Balancer) Proxy concepts (e.g., Amazon RDS Proxy) Service quotas and throttling (e.g., configuring service quotas for a workload in a standby environment) Storage options and characteristics (e.g., durability, replication) Workload visibility (e.g., AWS X-Ray)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_4","text":"Determining automation strategies to ensure infrastructure integrity Determining AWS services required for highly available and/or fault-tolerant architecture across AWS Regions or Availability Zones Identifying metrics based on business requirements for a highly available solution Implementing designs to mitigate single points of failure Implementing strategies to ensure data durability and availability (e.g., backups) Selecting an appropriate DR strategy to meet business requirements Using AWS services to improve reliability of legacy applications and applications not built for the cloud Using purpose-built AWS services for workloads","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#domain-3-design-high-performing-architectures","text":"","title":"Domain 3: Design High-Performing Architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-31-determine-high-performing-andor-scalable-storage-solutions","text":"","title":"Task Statement 3.1: Determine high-performing and/or scalable storage solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_5","text":"Hybrid storage solutions to meet business requirements Storage services with appropriate use cases (e.g., Amazon S3, Amazon EFS, Amazon EBS) Storage types with associated characteristics (e.g., object, file, block)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_5","text":"Determining storage services and configurations to meet performance demands Determining storage services that can scale to accommodate future needs","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-32-design-high-performing-and-elastic-compute-solutions","text":"","title":"Task Statement 3.2: Design high-performing and elastic compute solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_6","text":"AWS compute services with appropriate use cases (e.g., AWS Batch, Amazon EMR, Fargate) Distributed computing concepts supported by AWS global infrastructure and edge services Queuing and messaging concepts (e.g., publish/subscribe) Scalability capabilities with appropriate use cases (e.g., Amazon EC2 Auto Scaling, AWS Auto Scaling) Serverless technologies and patterns (e.g., Lambda, Fargate) Container orchestration (e.g., Amazon ECS, Amazon EKS)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_6","text":"Decoupling workloads for independent scaling of components Identifying metrics and conditions to perform scaling actions Selecting appropriate compute options and features (e.g., EC2 instance types) to meet business requirements Selecting appropriate resource type and size (e.g., Lambda memory) to meet business requirements","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-33-determine-high-performing-database-solutions","text":"","title":"Task Statement 3.3: Determine high-performing database solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_7","text":"AWS global infrastructure (e.g., Availability Zones, AWS Regions) Caching strategies and services (e.g., Amazon ElastiCache) Data access patterns (e.g., read-intensive vs. write-intensive) Database capacity planning (e.g., capacity units, instance types, Provisioned IOPS) Database connections and proxies Database engines with appropriate use cases (e.g., heterogeneous vs. homogeneous migrations) Database replication (e.g., read replicas) Database types and services (e.g., serverless, relational vs. non-relational, in-memory)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_7","text":"Configuring read replicas to meet business requirements Designing database architectures Determining appropriate database engine (e.g., MySQL vs. PostgreSQL) Determining appropriate database type (e.g., Amazon Aurora, Amazon DynamoDB) Integrating caching to meet business requirements","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-34-determine-high-performing-andor-scalable-network-architectures","text":"","title":"Task Statement 3.4: Determine high-performing and/or scalable network architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_8","text":"Edge networking services with appropriate use cases (e.g., Amazon CloudFront, AWS Global Accelerator) Network architecture design (e.g., subnet tiers, routing, IP addressing) Load balancing concepts (e.g., Application Load Balancer) Network connection options (e.g., AWS VPN, Direct Connect, AWS PrivateLink)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_8","text":"Creating network topology for various architectures (e.g., global, hybrid, multi-tier) Determining network configurations that can scale to accommodate future needs Determining appropriate placement of resources to meet business requirements Selecting appropriate load balancing strategy","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-35-determine-high-performing-data-ingestion-and-transformation-solutions","text":"","title":"Task Statement 3.5: Determine high-performing data ingestion and transformation solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_9","text":"Data analytics and visualization services with appropriate use cases (e.g., Amazon Athena, AWS Lake Formation, Amazon QuickSight) Data ingestion patterns (e.g., frequency) Data transfer services with appropriate use cases (e.g., AWS DataSync, AWS Storage Gateway) Data transformation services with appropriate use cases (e.g., AWS Glue) Secure access to ingestion access points Sizes and speeds needed to meet business requirements Streaming data services with appropriate use cases (e.g., Amazon Kinesis)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_9","text":"Building and securing data lakes Designing data streaming architectures Designing data transfer solutions Implementing visualization strategies Selecting appropriate compute options for data processing (e.g., Amazon EMR) Selecting appropriate configurations for ingestion Transforming data between formats (e.g., .csv to .parquet)","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#domain-4-design-cost-optimized-architectures","text":"","title":"Domain 4: Design Cost-Optimized Architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-41-design-cost-optimized-storage-solutions","text":"","title":"Task Statement 4.1: Design cost-optimized storage solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_10","text":"Access options (e.g., S3 bucket with Requester Pays object storage) AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., AWS Cost Explorer, AWS Budgets, AWS Cost and Usage Report) AWS storage services with appropriate use cases (e.g., Amazon FSx, Amazon EFS, Amazon S3, Amazon EBS) Backup strategies Block storage options (e.g., HDD volume types, SSD volume types) Data lifecycles Hybrid storage options (e.g., DataSync, Transfer Family, Storage Gateway) Storage access patterns Storage tiering (e.g., cold tiering for object storage) Storage types with associated characteristics (e.g., object, file, block)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_10","text":"Designing appropriate storage strategies (e.g., batch uploads to S3 vs. individual uploads) Determining the correct storage size for a workload Determining the lowest cost method of transferring data for a workload to AWS storage Determining when storage auto-scaling is required Managing S3 object lifecycles Selecting appropriate backup and/or archival solution Selecting appropriate service for data migration to storage services Selecting appropriate storage tier Selecting correct data lifecycle for storage Selecting the most cost-effective storage service for a workload","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-42-design-cost-optimized-compute-solutions","text":"","title":"Task Statement 4.2: Design cost-optimized compute solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_11","text":"AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., Cost Explorer, AWS Budgets, AWS Cost and Usage Report) AWS global infrastructure (e.g., Availability Zones, AWS Regions) AWS purchasing options (e.g., Spot Instances, Reserved Instances, Savings Plans) Distributed compute strategies (e.g., edge processing) Hybrid compute options (e.g., AWS Outposts, AWS Snowball Edge) Instance types, families, and sizes (e.g., memory optimized, compute optimized, virtualization) Optimization of compute utilization (e.g., containers, serverless computing, microservices) Scaling strategies (e.g., auto-scaling, hibernation)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_11","text":"Determining appropriate load balancing strategy (e.g., Application Load Balancer vs. Network Load Balancer vs. Gateway Load Balancer) Determining appropriate scaling methods and strategies for elastic workloads (e.g., horizontal vs. vertical, EC2 hibernation) Determining cost-effective AWS compute services with appropriate use cases (e.g., Lambda, Amazon EC2, Fargate) Determining required availability for different classes of workloads (e.g., production vs. non-production workloads) Selecting appropriate instance family for a workload Selecting appropriate instance size for a workload","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-43-design-cost-optimized-database-solutions","text":"","title":"Task Statement 4.3: Design cost-optimized database solutions"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_12","text":"AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., Cost Explorer, AWS Budgets, AWS Cost and Usage Report) Caching strategies Data retention policies Database capacity planning (e.g., capacity units) Database connections and proxies Database engines with appropriate use cases (e.g., heterogeneous vs. homogeneous migrations) Database replication (e.g., read replicas) Database types and services (e.g., relational vs. non-relational, Aurora, DynamoDB)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_12","text":"Designing appropriate backup and retention policies (e.g., snapshot frequency) Determining appropriate database engine (e.g., MySQL vs. PostgreSQL) Determining cost-effective AWS database services with appropriate use cases (e.g., DynamoDB vs. Amazon RDS, serverless) Determining cost-effective AWS database types (e.g., time series format, columnar format) Migrating database schemas and data to different locations and/or different database engines","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#task-statement-44-design-cost-optimized-network-architectures","text":"","title":"Task Statement 4.4: Design cost-optimized network architectures"},{"location":"notes/AWS-Solution-architect-exam/start-here/#knowledge-of_13","text":"AWS cost management service features (e.g., cost allocation tags, multi-account billing) AWS cost management tools with appropriate use cases (e.g., Cost Explorer, AWS Budgets, AWS Cost and Usage Report) Load balancing concepts (e.g., Application Load Balancer) NAT gateways (e.g., NAT instance costs vs. NAT gateway costs) Network connectivity (e.g., private lines, dedicated lines, VPNs) Network routing, topology, and peering (e.g., AWS Transit Gateway, VPC peering) Network services with appropriate use cases (e.g., DNS)","title":"Knowledge of"},{"location":"notes/AWS-Solution-architect-exam/start-here/#skills-in_13","text":"Configuring appropriate NAT gateway types for a network (e.g., a single shared NAT gateway vs. NAT gateways for each Availability Zone) Configuring appropriate network connections (e.g., Direct Connect vs. VPN vs. internet) Configuring appropriate network routes to minimize network transfer costs (e.g., Region to Region, Availability Zone to Availability Zone, private to public, Global Accelerator, VPC endpoints) Determining strategic needs for content delivery networks (CDNs) and edge caching Reviewing existing workloads for network optimizations Selecting appropriate throttling strategy Selecting appropriate bandwidth allocation for a network device (e.g., a single VPN vs. multiple VPNs, Direct Connect speed)","title":"Skills in"},{"location":"notes/AWS-Solution-architect-exam/start-here/#references","text":"Exam Prep Official Practice Question Set: AWS Certified Solutions Architect - Associate (SAA-C03 - English) AWS Well architected labs AWS Ramp up AWS Well-Architected Labs Tutorails Dojo AWS Webinars Topics mindmap Topic Details","title":"References"},{"location":"notes/AWS-Solution-architect-exam/topic-details/","text":"AWS Solution Architect Exam Teaching Plan (20 Hours) Topic Timeline (Hours) Description AWS Foundational Concepts (3 hours) 3 * Introduction to AWS Cloud Computing * Understanding the Shared Responsibility Model * AWS Global Infrastructure & Regions * Billing & Cost Management * AWS Service Catalog EC2 (Elastic Compute Cloud) (2 hours) 2 * EC2 Instance Types & Selection Criteria * Launching & Managing EC2 Instances * Block & Object Storage with EBS & S3 * Instance Security Groups & Network Access Control Lists (ACLs) VPC (Virtual Private Cloud) (2 hours) 2 * VPC Concepts & Benefits * Subnets & Route Tables * Internet Gateways & NAT Gateways * VPC Security Groups & Security Best Practices IAM (Identity and Access Management) (2 hours) 2 * IAM Users, Roles & Permissions * IAM Policies & Attaching Policies * MFA (Multi-Factor Authentication) * Security Best Practices with IAM S3 (Simple Storage Service) (1.5 hours) 1.5 * S3 Storage Classes & Lifecycle Management * S3 Buckets & Access Control * Transferring Data to S3 with Upload & Download Tools * Security Best Practices with S3 CloudWatch (1.5 hours) 1.5 * CloudWatch Monitoring & Logging * Alarms & Notifications * Monitoring Cloud Resources with CloudWatch Metrics & Logs * Security Monitoring with CloudTrail Route 53 (1 hour) 1 * Domain Name System (DNS) Introduction * Route 53 Hosted Zones & Record Types * Routing Traffic with Route 53 Traffic Management * DNS Failover with Route 53 Health Checks Auto Scaling (1 hour) 1 * Auto Scaling Groups & Launch Configurations * Scaling Policies & Scaling Events * Monitoring & Managing Auto Scaling Groups CloudFormation (2 hours) 2 * Infrastructure as Code (IaC) with CloudFormation * CloudFormation Templates & Resources * Stack Operations (Create, Update, Delete) * Benefits of Using CloudFormation Load Balancing (1 hour) 1 * Application Load Balancers & Network Load Balancers * Distributing Traffic Across Multiple EC2 Instances * Health Checks & Monitoring Load Balancers Database Services (2 hours) 2 * Amazon Relational Database Service (RDS) * Choosing the Right RDS Engine (MySQL, PostgreSQL etc.) * Scaling RDS Instances * Amazon DynamoDB (NoSQL Database) Security Services (2 hours) 2 * AWS Security Best Practices * AWS WAF (Web Application Firewall) * AWS Shield (DDoS Protection) * AWS Inspector for Vulnerability Scanning Practice Exams & Review (3 hours) 3 * Taking Practice Exams to Identify Knowledge Gaps * Reviewing Exam Scores & Focusing on Weak Areas * Reviewing Key Concepts & Consolidating Knowledge Total Time: 20 Hours Note: This is a sample plan and the timeline can be adjusted based on your learning pace and prior knowledge. You may spend more time on complex topics and less time on familiar ones. AWS Solution Architect Exam 20-Hour Teaching Plan Day Time Allocation Topics Covered 1 2 hours Introduction to AWS and the AWS Certified Solutions Architect Exam - Overview of AWS - Benefits of Cloud Computing - Exam Structure and Objectives 2 2 hours AWS Global Infrastructure - Regions, Availability Zones, and Edge Locations - Virtual Private Cloud (VPC) Basics - Understanding IAM (Identity and Access Management) 3 2 hours Compute Services - EC2 Instances and Pricing Options - Lambda Functions - Auto Scaling and Load Balancing 4 2 hours Storage Services - S3 (Simple Storage Service) - EBS (Elastic Block Store) - Glacier and Storage Gateway 5 2 hours Database Services - RDS (Relational Database Service) - DynamoDB - Redshift and Aurora 6 2 hours Networking and Content Delivery - VPC Deep Dive - Route 53 (DNS Service) - CloudFront (CDN) 7 2 hours Security and Compliance - IAM Advanced Features - KMS (Key Management Service) and Encryption - AWS Security Best Practices 8 2 hours Monitoring and Logging - CloudWatch - CloudTrail - AWS Config and Trusted Advisor 9 2 hours Application Services and Serverless Architecture - AWS Elastic Beanstalk - API Gateway - Serverless Applications with AWS Lambda 10 2 hours Migration and Transfer Services - AWS Migration Hub - Snowball and Snowmobile - Database Migration Service (DMS) 11 2 hours Architecture and Design Principles - Well-Architected Framework - High Availability and Fault Tolerance - Cost Optimization Strategies 12 2 hours Review and Practice Exams - Recap of Key Concepts - Practice Exam Questions - Exam-taking Strategies Additional Notes: Hands-on Practice: Ensure to allocate additional time for hands-on practice with AWS services, ideally outside the structured teaching hours. Documentation and Whitepapers: Encourage reading AWS documentation and whitepapers to deepen understanding. Discussion and Q&A: Allocate time for discussion and Q&A sessions to clarify doubts and reinforce learning. Good luck with your preparation!","title":"Topic details"},{"location":"notes/AWS-Solution-architect-exam/topic-details/#aws-solution-architect-exam-teaching-plan-20-hours","text":"Topic Timeline (Hours) Description AWS Foundational Concepts (3 hours) 3 * Introduction to AWS Cloud Computing * Understanding the Shared Responsibility Model * AWS Global Infrastructure & Regions * Billing & Cost Management * AWS Service Catalog EC2 (Elastic Compute Cloud) (2 hours) 2 * EC2 Instance Types & Selection Criteria * Launching & Managing EC2 Instances * Block & Object Storage with EBS & S3 * Instance Security Groups & Network Access Control Lists (ACLs) VPC (Virtual Private Cloud) (2 hours) 2 * VPC Concepts & Benefits * Subnets & Route Tables * Internet Gateways & NAT Gateways * VPC Security Groups & Security Best Practices IAM (Identity and Access Management) (2 hours) 2 * IAM Users, Roles & Permissions * IAM Policies & Attaching Policies * MFA (Multi-Factor Authentication) * Security Best Practices with IAM S3 (Simple Storage Service) (1.5 hours) 1.5 * S3 Storage Classes & Lifecycle Management * S3 Buckets & Access Control * Transferring Data to S3 with Upload & Download Tools * Security Best Practices with S3 CloudWatch (1.5 hours) 1.5 * CloudWatch Monitoring & Logging * Alarms & Notifications * Monitoring Cloud Resources with CloudWatch Metrics & Logs * Security Monitoring with CloudTrail Route 53 (1 hour) 1 * Domain Name System (DNS) Introduction * Route 53 Hosted Zones & Record Types * Routing Traffic with Route 53 Traffic Management * DNS Failover with Route 53 Health Checks Auto Scaling (1 hour) 1 * Auto Scaling Groups & Launch Configurations * Scaling Policies & Scaling Events * Monitoring & Managing Auto Scaling Groups CloudFormation (2 hours) 2 * Infrastructure as Code (IaC) with CloudFormation * CloudFormation Templates & Resources * Stack Operations (Create, Update, Delete) * Benefits of Using CloudFormation Load Balancing (1 hour) 1 * Application Load Balancers & Network Load Balancers * Distributing Traffic Across Multiple EC2 Instances * Health Checks & Monitoring Load Balancers Database Services (2 hours) 2 * Amazon Relational Database Service (RDS) * Choosing the Right RDS Engine (MySQL, PostgreSQL etc.) * Scaling RDS Instances * Amazon DynamoDB (NoSQL Database) Security Services (2 hours) 2 * AWS Security Best Practices * AWS WAF (Web Application Firewall) * AWS Shield (DDoS Protection) * AWS Inspector for Vulnerability Scanning Practice Exams & Review (3 hours) 3 * Taking Practice Exams to Identify Knowledge Gaps * Reviewing Exam Scores & Focusing on Weak Areas * Reviewing Key Concepts & Consolidating Knowledge Total Time: 20 Hours Note: This is a sample plan and the timeline can be adjusted based on your learning pace and prior knowledge. You may spend more time on complex topics and less time on familiar ones.","title":"AWS Solution Architect Exam Teaching Plan (20 Hours)"},{"location":"notes/AWS-Solution-architect-exam/topic-details/#aws-solution-architect-exam-20-hour-teaching-plan","text":"Day Time Allocation Topics Covered 1 2 hours Introduction to AWS and the AWS Certified Solutions Architect Exam - Overview of AWS - Benefits of Cloud Computing - Exam Structure and Objectives 2 2 hours AWS Global Infrastructure - Regions, Availability Zones, and Edge Locations - Virtual Private Cloud (VPC) Basics - Understanding IAM (Identity and Access Management) 3 2 hours Compute Services - EC2 Instances and Pricing Options - Lambda Functions - Auto Scaling and Load Balancing 4 2 hours Storage Services - S3 (Simple Storage Service) - EBS (Elastic Block Store) - Glacier and Storage Gateway 5 2 hours Database Services - RDS (Relational Database Service) - DynamoDB - Redshift and Aurora 6 2 hours Networking and Content Delivery - VPC Deep Dive - Route 53 (DNS Service) - CloudFront (CDN) 7 2 hours Security and Compliance - IAM Advanced Features - KMS (Key Management Service) and Encryption - AWS Security Best Practices 8 2 hours Monitoring and Logging - CloudWatch - CloudTrail - AWS Config and Trusted Advisor 9 2 hours Application Services and Serverless Architecture - AWS Elastic Beanstalk - API Gateway - Serverless Applications with AWS Lambda 10 2 hours Migration and Transfer Services - AWS Migration Hub - Snowball and Snowmobile - Database Migration Service (DMS) 11 2 hours Architecture and Design Principles - Well-Architected Framework - High Availability and Fault Tolerance - Cost Optimization Strategies 12 2 hours Review and Practice Exams - Recap of Key Concepts - Practice Exam Questions - Exam-taking Strategies","title":"AWS Solution Architect Exam 20-Hour Teaching Plan"},{"location":"notes/AWS-Solution-architect-exam/topic-details/#additional-notes","text":"Hands-on Practice: Ensure to allocate additional time for hands-on practice with AWS services, ideally outside the structured teaching hours. Documentation and Whitepapers: Encourage reading AWS documentation and whitepapers to deepen understanding. Discussion and Q&A: Allocate time for discussion and Q&A sessions to clarify doubts and reinforce learning. Good luck with your preparation!","title":"Additional Notes:"}]}